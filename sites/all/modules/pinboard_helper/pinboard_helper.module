<?php
define('NOTIFY_REPIN_SUBJECT', 'Message from site !site_name about a new repin');
define('NOTIFY_REPIN_MESSAGE', 'User !user !user_url made a repin !repin_url of your pin !pin_url');
define('NOTIFY_FOLLOW_SUBJECT', 'Message from site !site_name about a new follower');
define('NOTIFY_FOLLOW_MESSAGE', 'User !user !user_url has followed your boards');
define('NOTIFY_UNFOLLOW_SUBJECT', 'Message from site !site_name about an unfollower');
define('NOTIFY_UNFOLLOW_MESSAGE', 'User !user !user_url has unfollowed your boards');
define('NOTIFY_COMMENT_SUBJECT', 'Message from site !site_name about a new comment');
define('NOTIFY_COMMENT_MESSAGE', 'User !user !user_url has posted a comment !comment_url');
define('PINBOARD_HELPER_FLAG_TYPES', "Sexual Content\nViolent or Repulsive Content\nHateful or Abusive Content\nHarmful Dangerous Acts\nSpam\nInfringes My Rights");
define('PINBOARD_HELPER_FLAG_PIN_TEXT', '<h4>Report This Pin as Inappropriate</h4>Please select the category that most closely reflects your concern about the Pin, so that we can review it and determine if it violates our Community Guidelines or isn\'t appropriate for all viewers. Abusing this feature is also a violation of the Community Guidelines, so don\'t do it.');


/**
 * Implements hook_menu().
 */
function pinboard_helper_menu() {
  $menu = array();

  $menu['repin'] = array(
    'title' => 'Repin',
    'page callback' => 'pinboard_helper_repin',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
//    'file' => drupal_get_path('module', 'node').'/node.pages.inc',
  );

  $menu['pinboard/autocomplete'] = array(
    'title' => 'pinboard',
    'page callback' => 'pinboard_helper_autocomplete',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,

//    'file' => 'taxonomy.pages.inc',
  );
  $menu['addboardpin'] = array(
    'title' => 'Add+',
    'page callback' => 'pinboard_helper_addboardpin',
    'access callback' => 'pinboard_helper_follow_access',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['pinit'] = array(
    'title' => 'pinboard',
    'page callback' => 'pinboard_helper_pinit_js',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  $menu['addpinit'] = array(
    'title' => '"Pin It" Button',    
    'page callback' => 'pinboard_helper_addpinit',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu['follow'] = array(
    'title' => 'follow',    
    'page callback' => 'pinboard_helper_follow',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu['unfollow'] = array(
    'title' => 'follow',    
    'page callback' => 'pinboard_helper_unfollow',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu['youfollow'] = array(
    'title' => '你关注的',
    'page callback' => 'pinboard_helper_youfollow',
    'access callback' => 'pinboard_helper_follow_access',
    'type' => MENU_NORMAL_ITEM,
  );
  $menu['followers'] = array(
    'title' => 'Followers',
    'page callback' => 'pinboard_helper_followers',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $menu['board/add'] = array(
    'title' => 'Create a Board',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinboard_helper_form_board_edit', 2),
    'access callback' => 'pinboard_helper_follow_access',
    'type' => MENU_CALLBACK,
  );
  $menu['board/edit'] = array(
    'title' => '编辑专辑',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinboard_helper_form_board_edit', 2),
    'access callback' => 'pinboard_helper_follow_access',
    'type' => MENU_CALLBACK,
  );

  $menu['user/%/notifications'] = array(
    'title' => '通知信息',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pinboard_helper_notifications', 2),
    'access callback' => 'pinboard_helper_uac_access',
    //'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
  );
  
  $menu['like/vote/js'] = array(
    'page callback' => 'pinboard_helper_vote_ahah',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  
  return $menu;
}

/**
 * Implements hook_permission().
 */
function pinboard_helper_permission() {
  return array(
    'Visible Advanced Settings' => array(
      'title' => t('Visible Advanced Settings'),
    ),
  );
}

/**
 * Implements hook_field_extra_fields().
 */
function pinboard_helper_field_extra_fields() {
  $extra = array();

  foreach (node_type_get_types() as $type) {
    if ($type->has_title and $type->type == 'pin') {
      $extra['node'][$type->type] = array(
        'form' => array(
          'pinboard_board' => array(
            'label' => t('所属专辑'),
            'description' => t('Pinboard helper module element'),
            'weight' => -5,
          ),
          'pinboard_separator' => array(
            'label' => t('Separator - Advanced Settings'),
            'description' => t('All fields that are located below the separator are displayed in Advanced Settings'),
            'weight' => 3,
          ),
        ),
      );
    }
  }

  return $extra;
}

/**
 * Implements hook_form().
 */
/*
function pinboard_helper_content_form($node, $form_state) {
  $form = array();
  $type = node_type_get_type($node);
  if ($type->has_title and $type->type == 'pin') {
    $form['board'] = array(
      '#type' => 'textfield',
      '#title' => t('所属板块*'),
      '#required' => TRUE,
      '#default_value' => '',
      '#maxlength' => 255,
      '#weight' => -5,
    );
  }
  return $form;
}
*/

function pinboard_helper_vote_ahah() {
  $content_type = preg_replace('/[^\\w\\-]/', '', $_GET['content_type']);
  $content_id = (int) $_GET['content_id'];
  $widget_id = (int) $_GET['widget_id'];
  $widget_mode = (int) $_GET['widget_mode'];

  $widgets = variable_get('rate_widgets', array());
  $widget = $widgets[$widget_id];

  // Process options.
  foreach ($widget->options as $option) {
    // This name must be unique for all submit buttons across the page, AHAH will fail otherwise.
    $id = "opt-$widget_id-$content_type-$content_id-{$option[0]}";
    $token = rate_get_token($id);
    if (isset($_GET['token']) && $_GET['token'] == $token) {
      rate_save_vote($widget, $content_type, $content_id, $option[0], TRUE);
    }
  }

  // Process arbitrary value, used for sliders.
  if (isset($_GET['value']) && $widget->value_type == 'percent') {
    // Validate the token against the general widget token (found in the widget classes).
    $id = "rate-$widget_id-$content_type-$content_id";
    $token = _rate_get_token($id);
    $value = (int) $_GET['value'];
    if (isset($_GET['token']) && $_GET['token'] == $token && $value >= 0 && $value <= 100) {
      rate_save_vote($widget, $content_type, $content_id, $value, TRUE);
    }
  }
  $rateres = rate_get_results('node', $content_id, 1);
  print '<span class="likesresult">'.format_plural($rateres['count'], '1 喜欢', '@count 喜欢').'</span>';
  //print str_replace('rate','like',rate_generate_widget($widget_id, $content_type, $content_id, $widget_mode, TRUE, TRUE));

  module_invoke_all('exit') & exit;
}


function pinboard_helper_flag_form($form, &$form_state) {
  global $user;

  $cats = drupal_explode_tags(str_replace("\n", ',', variable_get('user_mail_register_pinboard_helper_flag_types', PINBOARD_HELPER_FLAG_TYPES)));

  $categories = array();
  if (isset($cats) and is_array($cats)) {
    foreach ($cats as $key => $value) {
      $categories[t($value)] = t($value);
    }
  }

  $form['#attributes']['class'][] = 'contact-form';

  $form['type'] = array(
    '#type' => 'select',
    '#title' => t('Category'),
    '#options' => $categories,
    '#required' => TRUE,
    //'#access' => count($categories) > 1,
  );
  $form['is_anonymous'] = array(
    '#type' => 'value',
    '#value' => $user->uid,
  );
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Flag This Pin'),
  );

  return $form;
}

function pinboard_helper_flag_form_submit($form, &$form_state) {
  global $user, $language;

  $values = $form_state['values'];
  $values['subject'] = t('Report');
  $values['message'] = t('Flags: ').$values['type']."\n".t('Node: ').url('node/'.arg(1), array('absolute' => TRUE))."\n";
  $values['category']['category'] = t('Flag');
  $values['sender'] = $user;
  if ($user->uid) {
    $values['sender']->name = $user->name;
    $values['sender']->mail = $user->mail;
  } else {
    $values['sender']->name = t('Anonymous');
    $values['sender']->mail = variable_get('site_mail', ini_get('sendmail_from'));
  }
  $to = variable_get('site_mail', ini_get('sendmail_from'));
  $from = $values['sender']->mail;

  drupal_mail('contact', 'page_mail', $to, language_default(), $values);

  watchdog('mail', '%sender-name (@sender-from) sent an e-mail regarding %category.', array('%sender-name' => $values['sender']->name, '@sender-from' => $from, '%category' => $values['category']['category']));

  drupal_set_message(t('Your message has been sent.'));
}


function pinboard_helper_notifications($form, &$form_state, $edit = array()) {
  global $user; 
  if (!$user->uid) drupal_goto();
  if (!isset($user->data['pinboard_helper']['notification_comments'])) $user->data['pinboard_helper']['notification_comments'] = 0;
  if (!isset($user->data['pinboard_helper']['notification_repin'])) $user->data['pinboard_helper']['notification_repin'] = 0;
  if (!isset($user->data['pinboard_helper']['notification_follower'])) $user->data['pinboard_helper']['notification_follower'] = 0;
  if (!isset($user->data['pinboard_helper']['notification_unfollowed'])) $user->data['pinboard_helper']['notification_unfollowed'] = 0;
  $options = array(
    1 => t('Always send notifications'),
    0 => t('Only one notification until the next login to the site'),
    2 => t('Never send notification'),
  );
  $form['notification_comments'] = array(
    '#type' => 'select',
    '#title' => t('Notification of new comments'),
    '#default_value' => $user->data['pinboard_helper']['notification_comments'],
    '#options' => $options,
    '#required' => false,
    //'#description' => t(''),
    //'#disabled' => $has_data,
  );
  $form['notification_repin'] = array(
    '#type' => 'select',
    '#title' => t('Notification of a new repin'),
    '#default_value' => $user->data['pinboard_helper']['notification_repin'],
    '#options' => $options,
    '#required' => false,
  );  
  $form['notification_follower'] = array(
    '#type' => 'select',
    '#title' => t('Notification of a new follower'),
    '#default_value' => $user->data['pinboard_helper']['notification_follower'],
    '#options' => $options,
    '#required' => false,
  );
  $form['notification_unfollowed'] = array(
    '#type' => 'select',
    '#title' => t('Notification of a new unfollower'),
    '#default_value' => $user->data['pinboard_helper']['notification_unfollowed'],
    '#options' => $options,
    '#required' => false,
  );
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));

  return $form;
}

function pinboard_helper_notifications_submit($form, &$form_state) {
  global $user;
  if (!$user->uid) drupal_goto();
  $time = time();  
  $data['data']['pinboard_helper']['notification_comments'] = $form_state['values']['notification_comments'];
  $data['data']['pinboard_helper']['notification_repin'] = $form_state['values']['notification_repin'];
  $data['data']['pinboard_helper']['notification_follower'] = $form_state['values']['notification_follower'];
  $data['data']['pinboard_helper']['notification_unfollowed'] = $form_state['values']['notification_unfollowed'];
  $data['data']['pinboard_helper']['notification_comments_t'] = $time;
  $data['data']['pinboard_helper']['notification_repin_t'] = $time;
  $data['data']['pinboard_helper']['notification_follower_t'] = $time;
  $data['data']['pinboard_helper']['notification_unfollowed_t'] = $time;

  $fid = $user->picture;
  unset($user->picture);
  $user->picture->fid = $fid;
  user_save($user, $data);
  
  drupal_set_message(t('settings have been saved'));
  $form_state['redirect'] = 'user/'.$user->uid.'/notifications';
}


function pinboard_helper_form_board_edit($form, &$form_state, $edit = array()) {
  global $user; 
  $arg = arg(2); $name = '';
  $us = db_select('pinboard_boards')->fields('pinboard_boards', array('uid'))->condition('bid', $arg, '=')->execute();
  foreach ($us as $uss) {
    if ($uss->uid != $user->uid) drupal_not_found();
  }
  $result = db_select('pinboard_boards')->fields('pinboard_boards', array('name'))->condition('bid', $arg, '=')->execute();
  foreach ($result as $us) {
    $name = check_plain($us->name);
  }
  $result = db_select('pinboard_boards')->fields('pinboard_boards', array('data'))->condition('bid', $arg, '=')->execute();
  foreach ($result as $us) {
    $data = unserialize($us->data);
  }
  if (isset($data['category'])) $category = $data['category']; else $category = 0;
  if (!isset($data['description'])) $data['description'] = '';
  if (isset($form_state['confirm_delete']) && isset($form_state['values']['bid'])) {
    return pinboard_helper_board_confirm_delete($form, $form_state, $form_state['values']['bid'], $form_state['values']['name']);
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('专辑名称'),
    '#default_value' => $name,
    '#maxlength' => 255,
    '#required' => TRUE,
  );
  $form['description'] = array(
    '#type' => 'textarea',
    '#title' => t('描述'),
    '#default_value' => $data['description'],
  );
  $field['settings']['allowed_values'][0]['vocabulary'] = 'category';
  $field['settings']['allowed_values'][0]['parent'] = 0;
  $options = taxonomy_allowed_values($field);
  $options = array(0 => t('选择分类')) + $options;
  $form['category'] = array(
    '#type' => 'select',
    '#title' => t('默认分类'),
    '#default_value' => $category,
    '#options' => $options,
    '#required' => false,
    '#description' => t(''),
    //'#disabled' => $has_data,
  );
  
  
  $tags = array();
  $result = db_select('pinboard_userboard')->fields('pinboard_userboard', array('data'))->condition('bid', $arg, '=')->execute();
  foreach ($result as $k => $us) {
    $t = unserialize($us->data);
    $tags[$k]->tid = $t['uid'];
    $tags[$k]->name = $t['name'];
  }
  //foreach ($items as $item) {
    //$tags[$item['tid']] = isset($item['taxonomy_term']) ? $item['taxonomy_term'] : taxonomy_term_load($item['tid']);
  //}
  //$tags[1]->tid = 1;
  //$tags[1]->name = 'admin';
  //$tags[2]->tid = 2;
  //$tags[2]->name = 'rico';
  //$tags = array(1 => array('' => 'admin'), 2 => 'rico');
  
  
  /*$form += array(
    '#type' => 'item',
    '#markup' => '',
    //'#element_validate' => array('active_tags_taxonomy_autocomplete_validate'),
  );
  $form['field_terms_t'] = array(
    '#markup' => t('Who can pin?'),
  );
  $form['field_terms'] = array(
    '#markup' => theme('pinboard_helper_term_list_remove', array('terms' => $tags)),
  );
  $form['term_entry'] = array(
    '#type' => 'textfield',
    '#default_value' => '',
    '#autocomplete_path' => 'user/autocomplete',
    '#size' => 60,
    '#maxlength' => 1024,
    '#attributes' => array('class' => array('at-term-entry')),
    '#theme_wrappers' => array(),
  );
  $form['add_button'] = array(
    '#type' => 'button',
    '#value' => t('Add'),
    '#attributes' => array('class' => array('at-add-btn')),
  );
  $form['terms'] = array(
    '#type' => 'hidden',
    '#default_value' => taxonomy_implode_tags($tags),
    '#size' => 60,
    '#maxlength' => 1024,
    //'#element_validate' => array('active_tags_taxonomy_autocomplete_validate'),
    '#attributes' => array('class' => array('at-terms')),
    '#theme_wrappers' => array(),
  );

  drupal_add_css(drupal_get_path('module', 'pinboard_helper') . '/at.css');
  drupal_add_js(array('activeTags' => array('mode' => 'csv')), 'setting');
  drupal_add_js(drupal_get_path('module', 'pinboard_helper') . '/at.js');
  */

  
  
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array('#type' => 'submit', '#value' => t('Save'));
  if ($arg) {
    $form['actions']['delete'] = array('#type' => 'submit', '#value' => t('Delete'));
    $form['bid'] = array('#type' => 'value', '#value' => $arg);
  }

  return $form;
}

/**
 * Implements hook_theme().
 */
function pinboard_helper_theme($existing, $type, $theme, $path) {
  return array(
    'pinboard_helper_term_list_remove' => array(
      'variables' => array('terms' => NULL),
    ),
    'pinboard_helper_term_list_add' => array(
      'variables' => array('terms' => NULL),
    ),
  );
}


function theme_pinboard_helper_term_list_remove($variables) {
  $output = '<div class="at-term-list">';
  $output .= '<div id="at-termm-my" class="at-termmy"><span class="at-termm-text">' . t('Me') . '</span></div> ';
  foreach ($variables['terms'] as $term) {
    // @todo add field level id for div id to prevent collisions.
    $output .= '<div id="at-term-' . $term->tid . '" class="at-term at-term-remove"><span class="at-term-text">' . $term->name . '</span><span class="at-term-action-remove">x</span></div> ';
  }
  $output .= '</div>';
  return $output;
}


function theme_pinboard_helper_term_list_add($variables) {
  $output = '';
  foreach ($variables['terms'] as $term) {
    $output .= '<div id="at-term-' . $term->tid . '" class="at-term at-term-add"><span class="at-term-text">' . $term->name . '</span><span class="at-term-action-add">x</span></div> ';
  }
  return $output;
}

function pinboard_helper_form_board_edit_validate($form, &$form_state) {
  global $user;
  if (isset($form_state['values']['name']) and $form_state['triggering_element']['#value'] != t('Delete') and !isset($form_state['values']['bid']) ) {
    $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $form_state['values']['name'], '=')->condition('uid', $user->uid, '=')->execute()->fetchCol();
    if (count($bid) and $bid[0]) {
      form_set_error('name', t('The name already exists'));
    }
  }
}

function pinboard_helper_form_board_edit_submit($form, &$form_state) {
  global $user;
  if ($form_state['triggering_element']['#value'] == t('Delete')) {

    $form_state['rebuild'] = TRUE;
    $form_state['confirm_delete'] = TRUE;
    return;
  }
  //drupal_set_message('<pre>'. check_plain(print_r($form_state['values'], 1)) .'</pre>');
  $data = array('category' => $form_state['values']['category'], 'description' => $form_state['values']['description']);
  
  if (isset($form_state['values']['bid']) and $form_state['values']['bid']) {
    db_update('pinboard_boards')
      ->condition('bid', $form_state['values']['bid'])
      ->fields(array(
    	  'uid' => $user->uid, 
    	  'name' => $form_state['values']['name'], 
    	  'data' => serialize($data)
  	  ))
      ->execute();
    drupal_set_message(t('更新专辑 %name.', array('%name' => $form_state['values']['name'])));
    $bid = $form_state['values']['bid'];
  } else {
    $query = db_insert('pinboard_boards')->fields(array('uid', 'name', 'data'));
    $query->values(array('uid' => $user->uid, 'name' => $form_state['values']['name'], 'data' => serialize($data)));
    $query->execute();
    $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $form_state['values']['name'], '=')->condition('uid', $user->uid, '=')->execute()->fetchCol();
    drupal_set_message(t('The board !board is created. You can edit board settings <a href="!link">here</a>', array('!board' => $form_state['values']['name'], '!link' => url('board/edit/'.$bid[0]))));
    $bid = $bid[0];
  } 
	
  db_delete('pinboard_userboard')
    ->condition('bid', $bid)
    ->execute();
  $terms = drupal_explode_tags($form_state['values']['terms']);
  foreach ($terms as $item) {
    $us = user_load_by_name($item);
    if (isset($us->uid) and $us->uid) {
    	$query = db_insert('pinboard_userboard')
      	->fields(array('uid', 'bid', 'data'));
      $query->values(array(
        'uid' => $us->uid, 
        'bid' => $bid,
        'data' => serialize(array(
          'uid' => $us->uid, 
          'name' => $us->name,
          'bid' => $bid, 
          'bname' => $form_state['values']['name'],
          'vuid' => $user->uid, 
          'vname' => $user->name, 
        )),
      ));
      $query->execute();
    }
  }

  $form_state['bid'] = $bid;
  $form_state['redirect'] = 'user/'.$user->uid;
}

function pinboard_helper_board_confirm_delete($form, &$form_state, $bid, $name) {
	
  $form['bid'] = array('#type' => 'value', '#value' => $bid);

  $form['#id'] = 'pinboard_helper_board_confirm_delete';
  $form['name'] = array('#type' => 'value', '#value' => $name);
  $form['#submit'] = array('pinboard_helper_board_confirm_delete_submit');
  return confirm_form($form,
    t('Are you sure you want to delete the board %title?',
    array('%title' => $name)),
    'user',
    t('Deleting a board will delete all the pins in it. This action cannot be undone.'),
    t('Delete'),
    t('Cancel'));
}

function pinboard_helper_board_confirm_delete_submit($form, &$form_state) {
  //$status = taxonomy_vocabulary_delete($form_state['values']['vid']);
  $result = db_select('pinboard_repins', 'r')
    ->fields('r', array('nid'))
    ->condition('bid', $form_state['values']['bid'], '=')
    ->execute()->fetchCol();
  node_delete_multiple($result);
  db_delete('pinboard_boards')->condition('bid', $form_state['values']['bid'], '=')->execute();
  drupal_set_message(t('Deleted board %name.', array('%name' => $form_state['values']['name'])));
  //watchdog('taxonomy', 'Deleted board %name.', array('%name' => $form_state['values']['name']), WATCHDOG_NOTICE);
  $form_state['redirect'] = 'user';
  //cache_clear_all();
  return;
}

function pinboard_helper_follow_access() {
  if ($GLOBALS['user']->uid ) {
    return TRUE;
  }
  return FALSE;
}

function pinboard_helper_uac_access() {
  if ($GLOBALS['user']->uid == arg(1) ) {
    return TRUE;
  }
  return FALSE;
}

function pinboard_helper_repin() {
  global $user;
  if (!$user->uid) {
    drupal_set_message(t('You must login before you can repin.'));
    drupal_goto('user');
  } else {
    require_once(drupal_get_path('module', 'node').'/node.pages.inc');
    //return drupal_get_form('pinboard_helper_repin_form');
    $rnode = node_load(arg(1));

    $repin = db_select('pinboard_repins')->fields('pinboard_repins', array('did'))->condition('nid', $rnode->nid, '=')->condition('uid', $rnode->uid, '=')->execute()->fetchCol();
    //drupal_set_message('<pre>'. check_plain(print_r($repin, 1)) .'</pre>');
    if (count($repin)) {
      $rnode->did = $repin[0];
    } else {
      $rnode->did = $rnode->nid;
    }
    $rnode->gid = $rnode->nid;

    unset($rnode->created);
    unset($rnode->changed);
    unset($rnode->rdf_mapping);
    unset($rnode->vid);
    unset($rnode->log);
    unset($rnode->status);
    unset($rnode->comment);
    unset($rnode->promote);
    unset($rnode->sticky);
    unset($rnode->nid);
    unset($rnode->tnid);
    unset($rnode->translate);
    unset($rnode->revision_timestamp);
    unset($rnode->revision_uid);
    unset($rnode->cid);
    unset($rnode->last_comment_timestamp);
    unset($rnode->last_comment_name);
    unset($rnode->last_comment_uid);
    unset($rnode->comment_count);
    unset($rnode->picture);
    unset($rnode->data);

    $rnode->uid = $user->uid;
    $rnode->name = $user->name;

    //drupal_set_message('<pre>'. check_plain(print_r(arg(1), 1)) .'</pre>');
    return drupal_get_form($rnode->type . '_node_form', $rnode);
//    return drupal_get_form('pinboard_helper_repin_form');
  }

//  print '';
//  exit;
}

function pinboard_helper_count_followers ($uid) {
    global $user;
    if ($uid) {
        $pids = db_select('pinboard_follow', 'p')
            ->condition('p.aid', $uid);
        $pids->addExpression('COUNT(distinct(p.uid))');
        //$pids->addExpression('distinct(p.uid)');
        $pids = $pids->execute()->fetchField();
        return $pids;
    } else {
        return '0';
    }
}

function pinboard_helper_count_following ($uid) {
    global $user;
    if ($uid) {
        $pids = db_select('pinboard_follow', 'p')
            ->condition('p.uid', $uid);
        $pids->addExpression('COUNT(distinct(p.aid))');
        //$pids->addExpression('distinct(p.aid)');
        $pids = $pids->execute()->fetchField();
        return $pids;
    } else {
        return '0';
    }
}


function pinboard_helper_followers () {
    global $user;
    if ($user->uid) {
        $out = '';
        $pids = db_select('pinboard_follow')
            ->fields('pinboard_follow', array('pid'))
            ->condition('uid', $user->uid)
            ->execute()->fetchCol();
        if(isset($pids[0])) {
            $result = db_select('pinboard_repins', 'r')
                ->extend('PagerDefault')
                ->fields('r', array('nid'))
                ->condition('bid', $pids, 'IN')
                ->limit(15)
                ->execute()->fetchCol();
            if(isset($result)) {
                $nodes = node_load_multiple($result);
                $nodes = node_view_multiple($nodes);
                $out .= render($nodes);
                $out .= theme('pager');
            }
        }
        if ($out) {
            return $out;
        } else {
            return '没有信息';
        }
    } else {
        drupal_goto('user');
    }
}

function pinboard_helper_youfollow () {
  global $user;
  if ($user->uid) {
    $out = '';
    $pids = db_select('pinboard_follow')
    ->fields('pinboard_follow', array('pid'))
    ->condition('uid', $user->uid)
    ->execute()->fetchCol();
    if(isset($pids[0])) {
      $result = db_select('pinboard_repins', 'r')
      ->extend('PagerDefault')
      ->fields('r', array('nid'))
      ->condition('bid', $pids, 'IN')
      ->limit(15)
      ->execute()->fetchCol();
      if(isset($result)) {
        $nodes = node_load_multiple($result);
        $nodes = node_view_multiple($nodes);
        $out .= render($nodes);
        //$out .= theme('pager');
      }
    }
    if ($out) {
      $pp = theme('pager');
      if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
      return $out.$pp;
      else
      return '';
    } else {
      return '<p>&nbsp;</p><center><h1>'.'没有信息'.'</h1></center><p>&nbsp;</p>';
    }
  } else {
    drupal_goto('user');
  }
}

function pinboard_helper_follow () {
  global $user;
  if ($user->uid) {
    $out = '';
    $arg1 = arg(1);
    $arg2 = arg(2);
    if (!is_numeric($arg2)) $arg2 = 0;
    if (is_numeric($arg1)) {
      if (!$arg2) {
        $bids = db_select('pinboard_boards')
        ->fields('pinboard_boards', array('bid'))
        ->condition('uid', $arg1, '=')
        ->execute()->fetchCol();
        if (count($bids)) foreach ($bids as $bid) {
          db_delete('pinboard_follow')
          ->condition('uid', $user->uid)
          ->condition('aid', $arg1)
          ->condition('pid', $bid)
          ->execute();
          $query = db_insert('pinboard_follow')
          ->fields(array('uid', 'aid', 'pid', 'timestamp'));
          $query->values(array(
            'uid' => $user->uid, 
            'aid' => $arg1,
            'pid' => $bid,
            'timestamp' => time(),
          ));
          $query->execute();          
        }
      } else {
        db_delete('pinboard_follow')
        ->condition('uid', $user->uid)
        ->condition('aid', $arg1)
        ->condition('pid', $arg2)
        ->execute();
        $query = db_insert('pinboard_follow')
        ->fields(array('uid', 'aid', 'pid', 'timestamp'));
        $query->values(array(
          'uid' => $user->uid, 
          'aid' => $arg1,
          'pid' => $arg2,
          'timestamp' => time(),
        ));
        $query->execute();
      }
    }
    $name = '';
    if ($arg2) {
      $bid = db_select('pinboard_boards')
      ->fields('pinboard_boards', array('name'))
      ->condition('bid', $arg2, '=')
      ->execute()->fetchCol();
      if (count($bid)) $name = $bid[0];
      drupal_set_message(t('你关注了 ').$name);
      //drupal_goto('user/'.$arg1.'/board/'.$arg2);
    } else {
       $bids = db_select('pinboard_boards')
      ->fields('pinboard_boards', array('name'))
      ->condition('uid', $arg1, '=')
      ->execute()->fetchCol();
      if (count($bids)) $name = implode(', ', $bids);
      drupal_set_message(t('你关注了 ').$name);
      //drupal_goto('user/'.$arg1);
    }
    $var->nid = '';
    $var->did = '';
    $var->cid = '';
    if (isset($arg1) and $arg1) 
      pinboard_helper_notify_send_mail($arg1, 
        variable_get('notify_follow_subject', NOTIFY_FOLLOW_SUBJECT), 
        variable_get('notify_follow_message', NOTIFY_FOLLOW_MESSAGE), 
        t('follow'),
        $var
      );
    drupal_goto();
  } else {
    drupal_goto('user');
  }
}

function pinboard_helper_unfollow () {
  global $user;
  if ($user->uid) {
    $out = '';
    $arg1 = arg(1);
    $arg2 = arg(2);
    if (!is_numeric($arg2)) $arg2 = 0;
    if (is_numeric($arg1)) {
      if ($arg2) {
        db_delete('pinboard_follow')
        ->condition('uid', $user->uid)
        ->condition('aid', $arg1)
        ->condition('pid', $arg2)
        ->execute();
      } else {
        db_delete('pinboard_follow')
        ->condition('uid', $user->uid)
        ->condition('aid', $arg1)
        ->execute();
      }
    }

    $name = '';
    if ($arg2) {
      $bid = db_select('pinboard_boards')
      ->fields('pinboard_boards', array('name'))
      ->condition('bid', $arg2, '=')
      ->execute()->fetchCol();
      if (count($bid)) $name = $bid[0];
      drupal_set_message('你取消了对 '.$name.' 的关注');
      //drupal_goto('user/'.$arg1.'/board/'.$arg2);
    } else {
       $bids = db_select('pinboard_boards')
      ->fields('pinboard_boards', array('name'))
      ->condition('uid', $arg1, '=')
      ->execute()->fetchCol();
      if (count($bids)) $name = implode(', ', $bids);
      drupal_set_message('你取消了对 '.$name.' 的关注');
      //drupal_goto('user/'.$arg1);
    }
    $var->nid = '';
    $var->did = '';
    $var->cid = '';
    if (isset($arg1) and $arg1) 
      pinboard_helper_notify_send_mail($arg1, 
        variable_get('notify_unfollow_subject', NOTIFY_UNFOLLOW_SUBJECT), 
        variable_get('notify_unfollow_message', NOTIFY_UNFOLLOW_MESSAGE), 
        t('unfollow'),
        $var
      );
    drupal_goto();
  } else {
    drupal_goto('user');
  }
}

function pinboard_helper_isfollow ($acc = false, $pid = 0) {
  global $user;
  static $pids = array();
  if ($user->uid and $acc) {
    if (!count($pids)) {
      $pidsr = db_select('pinboard_follow')
      ->fields('pinboard_follow', array('pid'))
      ->condition('uid', $user->uid)
      ->condition('aid', $acc->uid)
      ->execute()->fetchCol();
      foreach ($pidsr as $pidr) $pids[$pidr] = $pidr;
    }
    //drupal_set_message('<pre>'. check_plain(print_r($pids, 1)) .'</pre>');
    if (!$pid and count($pids)) return true;
    if (isset($pids[$pid])) return true;
    else return false;
  } else {
    return false;
  }
}

function pinboard_helper_comment_insert($comment) {
  // Reindex the node when comments are added.
  //drupal_set_message('<pre>'. check_plain(print_r($comment, 1)) .'</pre>');
    $var->nid = $comment->nid;
    $var->did = $comment->nid;
    $var->cid = $comment->cid;
    $no = db_select('node')->fields('node', array('uid'))->condition('nid', $comment->nid, '=')->execute()->fetchCol();
    if (isset($no[0]) and $no[0]) 
      pinboard_helper_notify_send_mail($no[0], 
        variable_get('notify_comment_subject', NOTIFY_COMMENT_SUBJECT), 
        variable_get('notify_comment_message', NOTIFY_COMMENT_MESSAGE), 
        t('comment'),
        $var
      );
}
/**
 * Implements hook_form_alter().
 */

function pinboard_helper_form_alter(&$form, $form_state, $form_id) {
  global $user;
  //drupal_set_message($form_id);
//drupal_set_message('<pre>'. check_plain(print_r($form, 1)) .'</pre>');
  if ($form_id == 'pin_node_form' and $user->uid) {
    $fw = field_bundle_settings('node','pin');
  //drupal_set_message('<pre>'. check_plain(print_r($fw, 1)) .'</pre>');
    
    //drupal_set_message('<pre>'. check_plain(print_r($_GET, 1)) .'</pre>');
    drupal_add_js(drupal_get_path('module', 'pinboard_helper').'/acb.js');
    //drupal_set_message('<pre>'. check_plain(print_r(url('node/add/pin', array('absolute' => TRUE)), 1)) .'</pre>');
    //drupal_set_message('<pre>'. check_plain(print_r($form, 1)) .'</pre>');
    
    $nid = 0;
    if (isset($form['#node']->gid)) $nid = $form['#node']->gid; elseif (isset($form['#node']->nid)) $nid = $form['#node']->nid;
    $bid = db_select('pinboard_repins')->fields('pinboard_repins', array('bid'))->condition('nid', $nid, '=')->condition('uid', $form['#node']->uid, '=')->execute()->fetchCol();
    if (count($bid)) $bid = $bid[0]; else $bid = 0;
    $name = db_select('pinboard_boards')->fields('pinboard_boards', array('name'))->condition('bid', $bid, '=')->execute()->fetchCol();
    if (count($name)) $name = $name[0]; else $name = '';
    $form['pinboard_board'] = array(
      '#title' => t('所属专辑'),
      '#type' => 'textfield',
      '#default_value' => $name,
      '#autocomplete_path' => 'pinboard/autocomplete',
      '#size' => 16,
      '#maxlength' => 1024,
      '#weight' => (isset($fw['extra_fields']['form']['pinboard_board']['weight']) ? $fw['extra_fields']['form']['pinboard_board']['weight'] : -5),
      '#required' => false,
      '#description' => t('从列表中选择已有专辑，或者直接输入新的专辑名称'),
    );
    if (isset($form['#node']->did)) {
      $form['pinboard_did'] = array(
        '#type' => 'hidden',
        '#value' => $form['#node']->did,
      );
    }

    if (isset($_GET['title'])) {
      $form['body'][$form['body']['#language']][0]['#default_value'] = $_GET['title'];
    }
    if (isset($_GET['description'])) {
      $form['body'][$form['body']['#language']][0]['#default_value'] .= "\n".$_GET['description'];
    }
    $isvi = 1;
    if (isset($_GET['url'])) {
      $form['field_url'][$form['field_url']['#language']][0]['value']['#default_value'] = $_GET['url'];
      if (isset($_GET['is_video']) and $_GET['is_video'] == 'true') {
        if (strpos($_GET['media'],'youtube.com') and !strpos($_GET['url'],'youtube.com')) {
        	$url1 = explode('/',$_GET['media']);
        	//drupal_set_message('<pre>'. check_plain(print_r($url1, 1)) .'</pre>');
          $form['field_embed'][$form['field_embed']['#language']][0]['video_url']['#default_value'] = 'http://www.youtube.com/watch?v='.$url1[count($url1)-2];
        } else {
          $form['field_embed'][$form['field_embed']['#language']][0]['video_url']['#default_value'] = $_GET['url'];
        }
        
        $isvi = 0;
      }
    }

    if (isset($_GET['media']) and $isvi) {
      if (function_exists('transliteration_clean_filename')) {
      	$destination = $form['field_image'][$form['field_image']['#language']][0]['#upload_location'].'/'.transliteration_clean_filename(basename($_GET['media']));
      } else {
      	$destination = $form['field_image'][$form['field_image']['#language']][0]['#upload_location'].'/'.basename($_GET['media']);
      }
      /*
      if (substr($destination, -1) != '/') {
        $destination .= '/';
      }
      */
      $ch = curl_init();
      curl_setopt($ch, CURLOPT_HEADER, 0);
      curl_setopt($ch, CURLOPT_FAILONERROR, 1);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
      curl_setopt($ch, CURLOPT_URL, $_GET['media']);
      $result = curl_exec($ch);
      curl_close($ch);
      if ($result) {

        $file = file_save_data($result, $destination);        
        if (isset($file->fid) and $file->fid) {
          $file->status = 0;
          drupal_write_record('file_managed', $file, 'fid');
          //drupal_set_message('<pre>'. check_plain(print_r($file, 1)) .'</pre>');
          if ($fileinfo = image_get_info(drupal_realpath($file->uri))) {            
            //drupal_set_message('<pre>'. check_plain(print_r($fileinfo, 1)) .'</pre>');
            $form['field_image'][$form['field_image']['#language']][0]['#default_value'] = (array)$file;
            if (isset($_GET['title'])) $form['field_image'][$form['field_image']['#language']][0]['#default_value']['alt'] = $_GET['title'];
            $form['field_image'][$form['field_image']['#language']][0]['#default_value']['title'] = '';
            $form['field_image'][$form['field_image']['#language']][0]['#default_value']['width'] = $fileinfo['width'];
            $form['field_image'][$form['field_image']['#language']][0]['#default_value']['height'] = $fileinfo['height'];
            $form['field_image'][$form['field_image']['#language']][0]['#description'] = '';
          }
        }
      }
      $form['field_embed']['#attributes']['style']  = 'display:none;visibility:hidden;';
    } elseif(!$isvi) {
      $form['field_image']['#attributes']['style']  = 'display:none;visibility:hidden;';
    } 
    if (arg(0) == 'repin') $form['field_image']['#prefix'] = '<style type="text/css">.image-widget .form-submit {display:none;visibility:hidden;}</style>';
    
    $form['pinboard_separator'] = array(
        '#type' => 'hidden',
        '#value' => 'separator',
        '#weight' => (isset($fw['extra_fields']['form']['pinboard_separator']['weight']) ? $fw['extra_fields']['form']['pinboard_separator']['weight'] : 3),
        '#suffix' => '<fieldset class="collapsible collapsed form-wrapper" id="edit-advansed-pin-settings"><legend><span class="fieldset-legend">'.t('更多录入信息').'</span></legend><div class="fieldset-wrapper">',
    );
    if (!user_access('Visible Advanced Settings')) $form['pinboard_separator']['#prefix'] = '<style type="text/css">#edit-advansed-pin-settings {display:none;visibility:hidden;}</style>';
    //$form['body']['#suffix'] = '<fieldset class="collapsible collapsed form-wrapper" id="edit-advansed-pin-settings"><legend><span class="fieldset-legend">'.t('Advanced Settings').'</span></legend><div class="fieldset-wrapper">';
    $form['actions']['#prefix'] = '</div></fieldset>';
    drupal_add_js('misc/collapse.js');
    
/*    $form['advansed_pin_settings'] = array(
      '#type' => 'fieldset',
      '#title' => t('Advanced Settings'),
      '#weight' => 20,
		  '#collapsible' => TRUE,
		  '#collapsed' => TRUE,
    );*/
 /*
    foreach ($form as $key => $name) {
      if (
           strpos($key, '#') === false and           
           $key != 'form_build_id' and $key != 'nid' and $key != 'vid' and $key != 'uid' and
           $key != 'form_token' and $key != 'form_id' and $key != 'actions' and 
           $key != 'created' and $key != 'type' and $key != 'language' and 
           $key != 'changed' and $key != 'advansed_pin_settings' and 
           $key != 'field_image' and 
           $key != 'field_embed' and 
           $key != 'body' and
           $key != 'field_url' and
           $key != 'pinboard_board'
         ) {
        $form['advansed_pin_settings'][$key] = $form[$key];
        unset($form[$key]);
      }
      if (
           $key == 'field_url' and !$form['nid']['#value']
         ) {
        $form['advansed_pin_settings'][$key] = $form[$key];
        unset($form[$key]);
      }
    }
    */
    /*
    $form['field_image']['#weight'] = -100;
    $form['field_embed']['#weight'] = -99;
    $form['pinboard_board']['#weight'] = -98;
    if ($form['nid']['#value']) $form['field_url']['#weight'] = -97;
    $form['body']['#weight'] = -96;
    $form['actions']['#weight'] = 100;
    */
    //$form['#submit'][] = 'pinboard_helper_form_node_pin_edit_submit';

  } 
  
  if ($form_id == 'user_admin_settings') {

    $email_token_help = t('Available variables are: !site_name, !user, !user_url, !repin_url, !pin_url, !comment_url.');

    $form['email_admin_notify_repin'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification of repin'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Edit the Notification of repin e-mail messages.') . ' ' . $email_token_help,
      '#group' => 'email',
    );
    $form['email_admin_notify_repin']['notify_repin_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('notify_repin_subject', NOTIFY_REPIN_SUBJECT),
      '#maxlength' => 180,
    );
    $form['email_admin_notify_repin']['notify_repin_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('notify_repin_message', NOTIFY_REPIN_MESSAGE),
      '#rows' => 15,
    );

    $form['email_admin_notify_follow'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification of follower'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Edit the Notification of follower e-mail messages.') . ' ' . $email_token_help,
      '#group' => 'email',
    );
    $form['email_admin_notify_follow']['notify_follow_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('notify_follow_subject', NOTIFY_FOLLOW_SUBJECT),
      '#maxlength' => 180,
    );
    $form['email_admin_notify_follow']['notify_follow_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('notify_follow_message', NOTIFY_FOLLOW_MESSAGE),
      '#rows' => 15,
    );

    $form['email_admin_notify_unfollow'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification of unfollower'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Edit the Notification of unfollower e-mail messages.') . ' ' . $email_token_help,
      '#group' => 'email',
    );
    $form['email_admin_notify_unfollow']['notify_unfollow_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('notify_unfollow_subject', NOTIFY_UNFOLLOW_SUBJECT),
      '#maxlength' => 180,
    );
    $form['email_admin_notify_unfollow']['notify_unfollow_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('notify_unfollow_message', NOTIFY_UNFOLLOW_MESSAGE),
      '#rows' => 15,
    );

    $form['email_admin_notify_comment'] = array(
      '#type' => 'fieldset',
      '#title' => t('Notification of comment'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#description' => t('Edit the Notification of comment e-mail messages.') . ' ' . $email_token_help,
      '#group' => 'email',
    );
    $form['email_admin_notify_comment']['notify_comment_subject'] = array(
      '#type' => 'textfield',
      '#title' => t('Subject'),
      '#default_value' => variable_get('notify_comment_subject', NOTIFY_COMMENT_SUBJECT),
      '#maxlength' => 180,
    );
    $form['email_admin_notify_comment']['notify_comment_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Body'),
      '#default_value' => variable_get('notify_comment_message', NOTIFY_COMMENT_MESSAGE),
      '#rows' => 15,
    );
    
    $form['email_admin_pinboard_helper_flag'] = array(
      '#type' => 'fieldset',
      '#title' => t('Pin Flag'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'email',
    );
    $form['email_admin_pinboard_helper_flag']['user_mail_register_pinboard_helper_flag_text'] = array(
      '#type' => 'textarea',
      '#title' => t('Text'),
      '#default_value' => variable_get('user_mail_register_pinboard_helper_flag_text', PINBOARD_HELPER_FLAG_PIN_TEXT),
    );
    $form['email_admin_pinboard_helper_flag']['user_mail_register_pinboard_helper_flag_types'] = array(
      '#type' => 'textarea',
      '#title' => t('Types'),
      '#default_value' => variable_get('user_mail_register_pinboard_helper_flag_types', PINBOARD_HELPER_FLAG_TYPES),
      '#rows' => 15,
    );
  }

}

function pinboard_helper_node_validate($node, $form, &$form_state) {
//drupal_set_message('<pre>'. check_plain(print_r($node, 1)) .'</pre>');

  if (isset($node->type) and $node->type == 'pin') {
    if (isset($node->field_image[pinboard_helper_get_lng($node->field_image)][0]['fid']) and $node->field_image[pinboard_helper_get_lng($node->field_image)][0]['fid']) {
      return;
    }
    if (isset($node->field_embed[pinboard_helper_get_lng($node->field_embed)][0]['video_url']) and $node->field_embed[pinboard_helper_get_lng($node->field_embed)][0]['video_url']) {
      return;
    }
    form_set_error('field_image', t('You must add an image or a link to the embedded video page'));
    //form_set_error('field_embed', '&nbsp;');
  }
  
}

function pinboard_helper_get_lng($ar) {
  if (is_array($ar)) {
    foreach ($ar as $key => $us) {
      //if ($us)
      return $key;
    }
  }
  
}

function pinboard_helper_node_presave($node) {
  global $user;
  //drupal_set_message('<pre>'. check_plain(print_r($node, 1)) .'</pre>');
  
  if (isset($node->pinboard_board) and $node->pinboard_board) {
    //if (strpos($node->pinboard_board, ' - ')) 
    $t = explode(' - ', $node->pinboard_board);
    if (isset($t[1])) $us = user_load_by_name($t[1]);
    if (isset($us->uid) and $us->uid) {
    	$buid = $us->uid;
    	$bname = $t[0];
    } else {
    	$buid = $node->uid;
    	$bname = $node->pinboard_board;
    }
    //drupal_set_message('<pre>'. check_plain(print_r($buid, 1).print_r($bname, 1)) .'</pre>');
    $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $bname, '=')->condition('uid', $buid, '=')->execute()->fetchCol();
    if (!count($bid) or !$bid[0]) {
      $query = db_insert('pinboard_boards')->fields(array('uid', 'name', 'data'));
      $query->values(array('uid' => $node->uid, 'name' => $node->pinboard_board, 'data' => ''));
      $query->execute();
      $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $node->pinboard_board, '=')->condition('uid', $node->uid, '=')->execute()->fetchCol();
      drupal_set_message(t('The board !board is created. You can edit board settings <a href="!link">here</a>', array('!board' => $node->pinboard_board, '!link' => url('board/edit/'.$bid[0]))));
    }
  } else {
    $bid = 0;
  }
  if (is_array($bid) and count($bid)) {
    $bid = $bid[0];
  } else {
    $bid = 0;
  }
  	if (isset($node->field_category) and !isset($node->field_category[pinboard_helper_get_lng($node->field_category)][0])) {
      $result = db_select('pinboard_boards')->fields('pinboard_boards', array('data'))->condition('bid', $bid, '=')->execute();
  		foreach ($result as $us) {
    	  $data = unserialize($us->data);
  	  }
  	  //drupal_set_message('<pre>'. check_plain(print_r($data, 1)) .'</pre>');
  	  if (isset($data['category']) and $data['category']) {
  	    $node->field_category[pinboard_helper_get_lng($node->field_category)][0]['tid'] = $data['category'];
  	    //taxonomy_delete_node_index($node);
        //taxonomy_build_node_index($node);
  	  }
  	}

  //$node->field_category[$node->language][0]['tid'] = 1;
}

/**
 * Implements hook_node_load().
 */
function pinboard_helper_node_load($nodes, $types) {

  $result = db_query('SELECT nid, did, bid FROM {pinboard_repins} WHERE nid IN(:nids)', array(':nids' => array_keys($nodes)));
  foreach ($result as $record) {
    $ns[$record->did] = $record->did;
    $bs[$record->bid] = $record->bid;
    $nodes[$record->nid]->ph_did = $record->did;
    $nodes[$record->nid]->ph_bid = $record->bid;
  }
  if (isset($bs)) {
    $result = db_query('SELECT bid, name FROM {pinboard_boards} WHERE bid IN(:bids)', array(':bids' => $bs));
    foreach ($result as $record) {
      $bsu[$record->bid] = $record->name;
    }
  }
  if (isset($ns)) {
    $result = db_query('SELECT nid, uid FROM {node} WHERE nid IN(:nids)', array(':nids' => $ns));
    foreach ($result as $record) {
      $us[$record->uid] = $record->uid;
      $nsu[$record->nid] = $record->uid;
    }
  }
  foreach ($nodes as $record) {
    $us[$record->uid] = $record->uid;
    $nsu[$record->nid] = $record->uid;
  }
  if (isset($us)) {
    $result = db_query('SELECT uid, name FROM {users} WHERE uid IN(:uids)', array(':uids' => $us));
    foreach ($result as $record) {
      $usu[$record->uid] = $record->name;
    }
  }
	$an = t('Anonimous');
	$bn = t('None');
  $node_count=count($nodes);
  foreach ($nodes as $record) {
    if (!isset($record->ph_did) or !$record->ph_did) $nodes[$record->nid]->ph_did = $record->nid;
    if (!isset($record->ph_bid) or !$record->ph_bid) $nodes[$record->nid]->ph_bid = 0;    
    $nodes[$record->nid]->ph_uid = isset($nsu[$nodes[$record->nid]->ph_did]) ? $nsu[$nodes[$record->nid]->ph_did] : $nodes[$record->nid]->uid;
    $nodes[$record->nid]->ph_name = (isset($usu[$nodes[$record->nid]->ph_uid])) ? $usu[$nodes[$record->nid]->ph_uid] : $an;
    $nodes[$record->nid]->ph_bname = (isset($bsu[$nodes[$record->nid]->ph_bid])) ? $bsu[$nodes[$record->nid]->ph_bid] : $bn;
    $nodes[$record->nid]->node_index = $node_count;
    $node_count--;
  }
  //drupal_set_message('<pre>'. check_plain(print_r($nsu, 1).' - '.print_r($usu, 1)) .'</pre>');
}
/**
 * Implements hook_node_update().
 */
function pinboard_helper_node_update($node) {
 pinboard_helper_save_pinboard($node);
}
/**
 * Implements hook_node_insert().
 */
function pinboard_helper_node_insert($node) {
 pinboard_helper_save_pinboard($node);
}

/**
 * Implements hook_node_delete().
 */
function pinboard_helper_node_delete($node) {
 db_delete('pinboard_repins')->condition('nid', $node->nid)->execute();
}


function pinboard_helper_save_pinboard($node) {

//function pinboard_helper_node_submit($node, $form, &$form_state) {
//function pinboard_helper_board_form_submit($form, &$form_state) {
  global $user;
  //drupal_set_message('<pre>'. check_plain(print_r($node, 1)) .'</pre>');
  if (isset($node->pinboard_board) and $node->pinboard_board) {
    if (strpos($node->pinboard_board, ' - ')) $t = explode(' - ', $node->pinboard_board);
    if (isset($t[1])) $us = user_load_by_name($t[1]);
    if (isset($us->uid) and $us->uid) {
    	$buid = $us->uid;
    	$bname = $t[0];
    } else {
    	$buid = $node->uid;
    	$bname = $node->pinboard_board;
    }
    
    $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $bname, '=')->condition('uid', $buid, '=')->execute()->fetchCol();
    //$bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $node->pinboard_board, '=')->condition('uid', $node->uid, '=')->execute()->fetchCol();
    if (!count($bid) or !$bid[0]) {
      $query = db_insert('pinboard_boards')->fields(array('uid', 'name', 'data'));
      $query->values(array('uid' => $node->uid, 'name' => $node->pinboard_board, 'data' => ''));
      $query->execute();
      $bid = db_select('pinboard_boards')->fields('pinboard_boards', array('bid'))->condition('name', $node->pinboard_board, '=')->condition('uid', $node->uid, '=')->execute()->fetchCol();
    }
  } else {
    $bid = 0;
  }
  if (is_array($bid) and count($bid)) {
    $bid = $bid[0];
  } else {
    $bid = 0;
  }
  if (isset($node->pinboard_did)) {
    $did = $node->pinboard_did;
  } else {
    $repin = db_select('pinboard_repins')->fields('pinboard_repins', array('did'))->condition('nid', $node->nid, '=')->condition('uid', $node->uid, '=')->execute()->fetchCol();
    if (count($repin)) {
      $did = $repin[0];
    } else {
      $did = $node->nid;
    }
  }
  if ($did != $node->nid) {
    $var->nid = $node->nid;
    $var->did = $did;
    $var->cid = '';
    $no = db_select('node')->fields('node', array('uid'))->condition('nid', $did, '=')->execute()->fetchCol();
    //$no = node_load($did);
    if (isset($no[0]) and $no[0]) 
      pinboard_helper_notify_send_mail($no[0], 
        variable_get('notify_repin_subject', NOTIFY_REPIN_SUBJECT), 
        variable_get('notify_repin_message', NOTIFY_REPIN_MESSAGE), 
        t('repin'),
        $var
      );
  }
  	//drupal_set_message('<pre>'. check_plain(print_r($did, 1)) .'</pre>');
  db_delete('pinboard_repins')->condition('nid', $node->nid)->condition('uid', $node->uid)->execute();
  $query = db_insert('pinboard_repins')->fields(array('uid', 'nid', 'did', 'bid', 'data'));
  $query->values(array(
    'uid' => $node->uid, 
    'nid' => $node->nid,
    'did' => $did,
    'bid' => $bid,
    'data' => '',
  ));
  $query->execute();
  
//  drupal_set_message(t('Your message has been sent.'));
}

/*
function pinboard_helper_repin_form($form, &$form_state) {
  global $user;

  $node = node_load(arg(1));
  if (empty($node->body[pinboard_helper_get_lng($node->body)][0]['value'])) $node->body[pinboard_helper_get_lng($node->body)][0]['value'] = '';
  //drupal_set_message('<pre>'. check_plain(print_r($node, 1)) .'</pre>');
  //$form['#attributes']['class'][] = 'contact-form';

  $form['board'] = array(
    '#title' => t('Board'),
    '#type' => 'textfield',
    '#default_value' => '', //taxonomy_implode_tags($tags),
    '#autocomplete_path' => 'pinboard/autocomplete',
    '#size' => 16,
    '#maxlength' => 1024,
    '#element_validate' => array('taxonomy_autocomplete_validate'),
  );
  $form['body'] = array(
    '#type' => 'textarea',
//    '#title' => t('Category'),
    '#default_value' => $node->body[pinboard_helper_get_lng($node->body)][0]['value'],
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Repin'),
  );

  return $form;
}
*/
/*
function pinboard_helper_repin_form_validate($form, &$form_state) {
  if (!$form_state['values']['cid']) {
    form_set_error('cid', t('You must select a valid category.'));
  }
  if (!valid_email_address($form_state['values']['mail'])) {
    form_set_error('mail', t('You must enter a valid e-mail address.'));
  }
}
*/
function pinboard_helper_notify_send_mail($uid, $subject, $message, $category, $var) {
  global $user, $language;
  $us = user_load($uid);
  if ($us->uid) {
    $ntype = 0;
    $ntime = 0;
    if (!isset($us->data['pinboard_helper']['notification_comments'])) $us->data['pinboard_helper']['notification_comments'] = 0;
    if (!isset($us->data['pinboard_helper']['notification_repin'])) $us->data['pinboard_helper']['notification_repin'] = 0;
    if (!isset($us->data['pinboard_helper']['notification_follower'])) $us->data['pinboard_helper']['notification_follower'] = 0;
    if (!isset($us->data['pinboard_helper']['notification_unfollowed'])) $us->data['pinboard_helper']['notification_unfollowed'] = 0;
    $data['data']['pinboard_helper'] = $us->data['pinboard_helper'];
    if ($category == t('comment')) {
      if (isset($us->data['pinboard_helper']['notification_comments_t'])) {
        $ntype = $us->data['pinboard_helper']['notification_comments'];
        $ntime = $us->data['pinboard_helper']['notification_comments_t'];
      }
      $data['data']['pinboard_helper']['notification_comments_t'] = time();
    } elseif ($category == t('repin')) {
      if (isset($us->data['pinboard_helper']['notification_repin_t'])) {
        $ntype = $us->data['pinboard_helper']['notification_repin'];
        $ntime = $us->data['pinboard_helper']['notification_repin_t'];
      }
      $data['data']['pinboard_helper']['notification_repin_t'] = time();
    } elseif ($category == t('follow')) {
      if (isset($us->data['pinboard_helper']['notification_follower_t'])) {
        $ntype = $us->data['pinboard_helper']['notification_follower'];
        $ntime = $us->data['pinboard_helper']['notification_follower_t'];
      }
      $data['data']['pinboard_helper']['notification_follower_t'] = time();
    } elseif ($category == t('unfollow')) {
      if (isset($us->data['pinboard_helper']['notification_unfollowed_t'])) {
        $ntype = $us->data['pinboard_helper']['notification_unfollowed'];
        $ntime = $us->data['pinboard_helper']['notification_unfollowed_t'];
      }
      $data['data']['pinboard_helper']['notification_unfollowed_t'] = time();
    }
    //drupal_set_message('<pre>'.$ntime.' - '.$us->access.'</pre>');
    //drupal_set_message('send1');
    //drupal_set_message('<pre>'. check_plain(print_r($us, 1)) .'</pre>');
    //$fid = $us->picture;
    //unset($us->picture);
    //$us->picture->fid = $fid;
    user_save($us, $data);
    if ($ntype == 2 or ($ntype == 0 and $ntime > $us->access)) return;
    //drupal_set_message('send2');
  }
  //drupal_set_message('send');
  //if (!variable_get('pinboard_notify_send_mail', 1)) return;

  //$values = $form_state['values'];
  //$us = user_load($uid);
  $var->name = $us->name;
  $var->uid = $us->uid;
  if ($user->uid) {
    $var->uname = $user->name;
    $var->uuid = $user->uid;
  } else {
    $var->uuid = 0;
    $var->uname = t('Anonymous');
  }
  $values['subject'] = pinboard_helper_str_replace($subject, $var);
  $values['message'] = pinboard_helper_str_replace($message, $var);
  $values['category']['category'] = $category;
  //$values['sender'] = $us;
  $values['sender']->uid = 0;
  $values['sender']->name = check_plain(variable_get('site_name', 'Drupal'));
  $values['sender']->mail = variable_get('site_mail', ini_get('sendmail_from'));
  //$values['category'] = contact_load($values['cid']);

  $to = $us->mail;
  $from = $values['sender']->mail;

  drupal_mail('contact', 'page_mail', $to, language_default(), $values);

  watchdog('mail', '%sender-name (@sender-from) sent an e-mail regarding %category.', array('%sender-name' => $to, '@sender-from' => $from, '%category' => $values['category']['category']));

  //drupal_set_message(t('Your message has been sent.'));
}

function pinboard_helper_str_replace($string, $var) {
  $out = t($string, array(
    '!site_name' => check_plain(variable_get('site_name', 'Drupal')), 
    '!user' => $var->uname ? $var->uname : t('Anonymous'), 
    '!user_url' => $var->uuid ? url('user/'.$var->uuid, array('absolute' => TRUE)) : '', 
    '!repin_url' => $var->nid ? url('node/'.$var->nid, array('absolute' => TRUE)) : '', 
    '!pin_url' => $var->did ? url('node/'.$var->did, array('absolute' => TRUE)): '',
    '!comment_url' => $var->cid ? url('node/'.$var->did, array('fragment' => 'comment-'.$var->cid, 'absolute' => TRUE)) : url('node/'.$var->did, array('fragment' => 'comments', 'absolute' => TRUE))
  ));
  return $out;
}

function pinboard_helper_autocomplete($string = '') {
  global $user;
  $matches = array();
  //if ($string) {
  //  $result = db_select('pinboard_boards')->fields('pinboard_boards', array('name'))->condition('name', db_like($string) . '%', 'LIKE')->condition('uid', $user->uid, '=')->range(0, 50)->execute();
  //} else {
    $result = db_select('pinboard_boards')->fields('pinboard_boards', array('name'))->condition('uid', $user->uid, '=')->range(0, 50)->execute();
  //}
  foreach ($result as $us) {
    $matches[$us->name] = check_plain($us->name);
  }
  //if ($string) {
  //  $result = db_select('pinboard_userboard')->fields('pinboard_boards', array('name'))->condition('name', db_like($string) . '%', 'LIKE')->condition('uid', $user->uid, '=')->range(0, 50)->execute();
  //} else {
    $result = db_select('pinboard_userboard')->fields('pinboard_userboard', array('data'))->condition('uid', $user->uid, '=')->range(0, 50)->execute();
  //}
  foreach ($result as $us) {
    $t = unserialize($us->data);
    $matches[$t['bname'].' - '.$t['vname']] = $t['bname'].' - '.$t['vname'];
  }
  drupal_json_output($matches);
  exit;
}


function pinboard_helper_pinit_js() {
 global $base_url;
//status=no,resizable=no,scrollbars=yes,personalbar=no,directories=no,location=no,toolbar=no,menubar=no,width=632,height=670,left=0,top=0
$t0 = t('Cancel');
$t1 = t('We need to remove the StumbleUpon toolbar before you can pin anything. Click OK to do this or Cancel to stay here.');
$t2 = t('Unfortunately, this website doesn\'t allow pinning. You can contact the website owner with any questions you may have regarding their stance on pinning.');
$t3 = t('Sorry, can\'t pin directly from %privateDomain%.');
$t4 = t('Sorry, but we cannot see any big images or videos on this page to pin.');
$t5 = t('The pinning bookmarklet is now installed! You can click the \"Pin It\" button from your bookmarks to pin images from around the web.');
$t6 = t('Sorry, cannot pin this image.');
$t7 = t('Sorry, can\'t pin from non-HTML pages. If you\'re trying to upload an image, please visit '.url('', array('absolute' => TRUE)).'.');
$t8 = t('Pinning is not allowed from this page.\n\n%s% provided the following reason:');

if (false) {
$url = str_replace(array('http://','https://'),'',url('node/add/pin', array('absolute' => TRUE)));
print str_replace(array("\n","\r"),'','
(function(k,m,n,l){var a=k[l.k]={w:k,d:m,n:n,a:l,s:{}

,f:function(){return{callback:[],kill:function(b){if(typeof b==="string")b=a.d.getElementById(b);
b&&b.parentNode&&b.parentNode.removeChild(b)}

,get:function(b,c){var d=null;
return d=b[c]||b.getAttribute(c)}

,make:function(b){var c=false,d,e;

for(d in b)if(b[d].hasOwnProperty){c=a.d.createElement(d);

for(e in b[d])if(b[d][e].hasOwnProperty)if(typeof b[d][e]==="string")c[e]=b[d][e];

break}

return c}

,listen:function(b,c,d){if(typeof a.w.addEventListener!==
"undefined")b.addEventListener(c,d,false);

else typeof a.w.attachEvent!=="undefined"&&b.attachEvent("on"+c,d)}

,getSelection:function(){return(""+(a.w.getSelection?a.w.getSelection():a.d.getSelection?a.d.getSelection():a.d.selection.createRange().text)).replace(/(^\s+|\s+$)/g,"")}

,pin:function(b){var c="";

c=b.getElementsByTagName("IMG")[0];

var d="false",e=a.a.pin+"?",f=(new Date).getTime();

if(b.rel==="video")d="true";

e=e+"media="+encodeURIComponent(b.getAttribute("pinImg"));

e=e+"&url="+encodeURIComponent(c.getAttribute("url")||
a.d.URL);

e=e+"&title="+encodeURIComponent(a.d.title);

e=e+"&is_video="+d;

c=a.v.selectedText||c.title||c.alt;

c=c.substr(0,500);

e=e+"&description="+encodeURIComponent(c);

if(a.v.inlineHandler)e=e+"&via="+encodeURIComponent(a.d.URL);

if(a.v.hazIOS){a.w.setTimeout(function(){a.w.location="pinit12://"+e}

,25);

a.w.location="http://"+e}

else a.w.open("http://"+e,"pin"+f,a.a.pop)}

,close:function(b){if(a.s.bg){a.d.b.removeChild(a.s.shim);

a.d.b.removeChild(a.s.bg);

a.d.b.removeChild(a.s.bd)}

k.hazPinningNow=false;
b&&a.w.alert(b);

a.v.hazGoodUrl=false;

a.w.scroll(0,a.v.saveScrollTop)}

,click:function(b){b=b||a.w.event;

var c=null;

if(c=b.target?b.target.nodeType===3?b.target.parentNode:b.target:b.srcElement)if(c===a.s.x)a.f.close();

else if(c.className!==a.a.k+"_hideMe"){if(!c.className)c=c.parentNode;

if(c.parentNode.className===a.a.k+"_pinContainer"||c.parentNode.parentNode.className===a.a.k+"_pinContainer"||c.className===a.a.k+"_pinButton"){a.f.pin(c.parentNode.getElementsByTagName("A")[0]);

a.w.setTimeout(function(){a.f.close()}

,
10)}

}

}

,behavior:function(){a.f.listen(a.s.bd,"click",a.f.click)}

,presentation:function(){var b=a.f.make({STYLE:{type:"text/css"}

}

),c=a.a.cdn[a.w.location.protocol]||a.a.cdn["http:"],d=a.a.rules.join("\n");

d=d.replace(/#_/g,"#"+l.k+"_");

d=d.replace(/\._/g,"."+l.k+"_");

d=d.replace(/_cdn/g,c);

if(b.styleSheet)b.styleSheet.cssText=d;

else b.appendChild(a.d.createTextNode(d));

a.d.h.appendChild(b)}

,addThumb:function(b,c,d){(d=b.getElementsByTagName(d)[0])?b.insertBefore(c,d):b.appendChild(c)}

,thumb:function(b){var c=
a.a.k+"_thumb_"+b.src;

if(b.src){if(!b.media)b.media="image";

var d=a.f.make({SPAN:{className:a.a.k+"_pinContainer"}

}

),e=a.f.make({A:{rel:b.media}

}

),f=new Image;

f.setAttribute("nopin","nopin");

if(b.title)f.title=b.title;

b.page&&f.setAttribute("url",b.page);

f.style.visibility="hidden";

f.onload=function(){var h=this.width,i=this.height;

if(i>h){this.height=a.a.thumbCellSize;

var j=a.a.thumbCellSize*(h/i);

this.style.width=j;

this.style.marginLeft=a.a.thumbCellSize/2-j/2+"px"}

if(i<h){this.width=a.a.thumbCellSize;


j=a.a.thumbCellSize*(i/h);

this.style.height=j;

this.style.marginTop=a.a.thumbCellSize/2-j/2+"px"}

if(i===h){this.style.height=a.a.thumbCellSize+"px";

this.style.width=a.a.thumbCellSize+"px"}

this.style.visibility=""}

;

f.src=b.thumb?b.thumb:b.src;

e.setAttribute("pinImg",b.src);

e.appendChild(f);

if(b.media!=="image"){f=a.f.make({B:{}

}

);

e.appendChild(f)}

f=a.f.make({CITE:{innerHTML:b.height+" x "+b.width}

}

);

e.appendChild(f);

d.appendChild(e);

d.appendChild(a.f.make({SPAN:{className:a.a.k+"_pinButton"}

}

));

e=false;


if(b.dupe){f=0;

for(var g=a.v.thumbed.length;

f<g;

f+=1)if(a.v.thumbed[f].id.indexOf(b.dupe)!==-1){e=a.v.thumbed[f].id;

break}

}

if(e!==false)if(e=a.d.getElementById(e)){e.parentNode.insertBefore(d,e);

e.parentNode.removeChild(e)}

else b.page||b.media!=="image"?a.f.addThumb(a.s.embedContainer,d,"SPAN"):a.f.addThumb(a.s.imgContainer,d,"SPAN");

else{a.s.imgContainer.appendChild(d);

a.v.hazAtLeastOneGoodThumb+=1}

(b=a.d.getElementById(c))&&b.parentNode.removeChild(b);

d.id=c;

a.v.thumbed.push(d)}

}

,call:function(b,
c){var d=a.f.callback.length,e=a.a.k+".f.callback["+d+"]",f=a.d.createElement("SCRIPT");

a.f.callback[d]=function(g){c(g,d);

a.v.awaitingCallbacks-=1;

a.f.kill(e)}

;

f.id=e;

f.src=b+"&callback="+e;

f.type="text/javascript";

f.charset="utf-8";

a.v.firstScript.parentNode.insertBefore(f,a.v.firstScript);

a.v.awaitingCallbacks+=1}

,ping:{checkDomain:function(b){if(b&&b.disallowed_domains&&b.disallowed_domains.length)for(var c=0,d=b.disallowed_domains.length;

c<d;

c+=1)b.disallowed_domains[c]===a.w.location.host&&
a.f.close(a.a.msg.noPin)}

,info:function(b){if(b)if(b.err)a.f.unThumb(b.id);

else if(b.reply&&b.reply.img&&b.reply.img.src){var c="";

if(b.reply.page)c=b.reply.page;

b.reply.nopin&&b.reply.nopin===1?a.f.unThumb(b.id):a.f.thumb({src:b.reply.img.src,height:b.reply.img.height,width:b.reply.img.width,media:b.reply.media,title:b.reply.description,page:c,dupe:b.id}

)}

}

}

,unThumb:function(b){if(b=a.d.getElementById(a.a.k+"_thumb_"+b)){var c=b.getElementsByTagName("SPAN")[0];

b.removeChild(c);

c=a.f.make({SPAN:{className:a.a.k+
"_hideMe",innerHTML:a.a.msg.grayOut}

}

);

b.appendChild(c);

a.v.hazAtLeastOneGoodThumb-=1}

}

,getExtendedInfo:function(b){if(!a.v.hazCalledForInfo[b]){a.v.hazCalledForInfo[b]=true;

a.f.call(a.a.embed+b,a.f.ping.info)}

}

,getId:function(b){for(var c,d=b.u.split("?")[0].split("#")[0].split("/");

!c;

)c=d.pop();

if(b.r)c=parseInt(c,b.r);

return encodeURIComponent(c)}

,hazUrl:{flickr:function(){var b=a.d.getElementById("image-src");

if(b&&b.href){var c=new Image;

c.onload=function(){a.f.thumb({src:this.src,height:this.height,
width:this.width}

);

a.f.getExtendedInfo("src=flickr&id="+encodeURIComponent(a.v.canonicalImage))}

;

c.src=a.v.canonicalImage=b.href.split("_m.jpg")[0]+"_z.jpg"}

}

,vimeo:function(){var b=a.f.getId({u:a.d.URL,r:10}

);

a.d.getElementsByTagName("DIV");

a.d.getElementsByTagName("LI");

a.d.getElementsByTagName("A");

var c="vimeo";

if(a.d.URL.match(/^https/))c+="_s";

b>1E3&&a.f.getExtendedInfo("src="+c+"&id="+b)}

,youtube:function(){for(var b=a.d.getElementsByTagName("META"),c=0,d=b.length;

c<d;

c+=1){var e=a.f.get(b[c],
"property");

if(e==="og:url"){a.v.canonicalUrl=a.f.get(b[c],"content");

a.v.canonicalId=a.v.canonicalUrl.split("=")[1].split("&")[0]}

if(e==="og:image")a.v.canonicalImage=a.f.get(b[c],"content")}

if(a.v.canonicalImage&&a.v.canonicalUrl){b=new Image;

b.onload=function(){a.f.thumb({src:this.src,height:this.height,width:this.width,type:"video"}

);

a.f.getExtendedInfo("src=youtube&id="+encodeURIComponent(a.v.canonicalId))}

;

b.src=a.v.canonicalImage}

else{a.v.canonicalImage=null;

a.v.canonicalUrl=null}

}

,pinterest:function(){a.f.close(a.a.msg.installed)}

,
facebook:function(){a.f.close(a.a.msg.privateDomain.replace(/%privateDomain%/,"Facebook"))}

,googleReader:function(){a.f.close(a.a.msg.privateDomain.replace(/%privateDomain%/,"Google Reader"))}

,stumbleUpon:function(){var b=0,c=a.a.stumbleFrame.length,d;

for(b=0;

b<c;

b+=1)if(d=a.d.getElementById(a.a.stumbleFrame[b])){a.f.close();

if(a.w.confirm(a.a.msg.bustFrame))a.w.location=d.src;

break}

}

,googleImages:function(){a.v.inlineHandler="google"}

,tumblr:function(){a.v.inlineHandler="tumblr"}

,netflix:function(){a.v.inlineHandler=
"netflix"}

}

,hazSite:{flickr:{img:function(b){if(b.src){b.src=b.src.split("?")[0];

a.f.getExtendedInfo("src=flickr&id="+encodeURIComponent(b.src))}

}

}

,behance:{img:function(b){if(b.src){b.src=b.src.split("?")[0];

a.f.getExtendedInfo("src=behance&id="+encodeURIComponent(b.src))}

}

}

,netflix:{img:function(b){if(b=b.src.split("?")[0].split("#")[0].split("/").pop()){id=parseInt(b.split(".")[0]);

id>1E3&&a.v.inlineHandler&&a.v.inlineHandler==="netflix"&&a.f.getExtendedInfo("src=netflix&id="+id)}

}

}

,youtube:{img:function(b){b=
b.src.split("?")[0].split("#")[0].split("/");

b.pop();

(id=b.pop())&&a.f.getExtendedInfo("src=youtube&id="+id)}

,iframe:function(b){(b=a.f.getId({u:b.src}

))&&a.f.getExtendedInfo("src=youtube&id="+b)}

,video:function(b){(b=b.getAttribute("data-youtube-id"))&&a.f.getExtendedInfo("src=youtube&id="+b)}

,embed:function(b){var c=b.getAttribute("flashvars"),d="";

if(c){if(d=c.split("video_id=")[1])d=d.split("&")[0];

d=encodeURIComponent(d)}

else d=a.f.getId({u:b.src}

);

d&&a.f.getExtendedInfo("src=youtube&id="+d)}

,
object:function(b){b=b.getAttribute("data");

var c="";

if(b)(c=a.f.getId({u:b}

))&&a.f.getExtendedInfo("src=youtube&id="+c)}

}

,vimeo:{iframe:function(b){b=a.f.getId({u:b.src,r:10}

);

b>1E3&&a.f.getExtendedInfo("src=vimeo&id="+b)}

}

}

,parse:function(b,c){b=b.split(c);

if(b[1])return b[1].split("&")[0];

return""}

,handleInline:{google:function(b){var c,d,e=0,f=0;

if(b.src){f=b.parentNode;

if(f.tagName==="A"&&f.href){c=a.f.parse(f.href,"&imgrefurl=");

d=a.f.parse(f.href,"&imgurl=");

e=parseInt(a.f.parse(f.href,"&w="));


f=parseInt(a.f.parse(f.href,"&h="));

d&&c&&f>a.a.minImgSize&&e>a.a.minImgSize&&a.f.thumb({thumb:b.src,src:d,page:c,height:f,width:e}

)}

}

}

,tumblr:function(b){var c=[];

c=null;

c="";

if(b.src){for(c=b.parentNode;

c.tagName!=="LI"&&c!==a.d.b;

)c=c.parentNode;

if(c.tagName==="LI"&&c.parentNode.id==="posts"){c=c.getElementsByTagName("A");

(c=c[c.length-1])&&c.href&&a.f.thumb({src:b.src,page:c.href,height:b.height,width:b.width}

)}

}

}

}

,hazTag:{img:function(b){if(a.v.inlineHandler&&typeof a.f.handleInline[a.v.inlineHandler]===
"function")a.f.handleInline[a.v.inlineHandler](b);

else b.src.match(/^data/)||b.height>a.a.minImgSize&&b.width>a.a.minImgSize&&a.f.thumb({src:b.src,height:b.height,width:b.width}

)}

,meta:function(b){var c,d;

if(b.name&&b.name.toUpperCase()==="PINTEREST"&&b.content&&b.content.toUpperCase()==="NOPIN")if(d=a.f.get(b,"description")){c="The owner of the site";

b=a.d.URL.split("/");

if(b[2])c=b[2];

a.f.close(a.a.msg.noPinReason.replace(/%s%/,c)+"\n\n"+d)}

else a.f.close(a.a.msg.noPin)}

}

,checkTags:function(){var b,
c,d,e,f,g,h,i,j;

a.v.tag=[];

b=0;

for(c=a.a.check.length;

b<c;

b+=1){f=a.d.getElementsByTagName(a.a.check[b]);

d=0;

for(e=f.length;

d<e;

d+=1){g=f[d];

!g.getAttribute("nopin")&&g.style.display!=="none"&&g.style.visibility!=="hidden"&&a.v.tag.push(g)}

}

b=0;

for(c=a.v.tag.length;

b<c;

b+=1){f=a.v.tag[b];

g=f.tagName.toLowerCase();

if(a.a.tag[g])for(h in a.a.tag[g])if(a.a.tag[g][h].hasOwnProperty){i=a.a.tag[g][h];

if(j=a.f.get(f,i.att)){d=0;

for(e=i.match.length;

d<e;

d+=1)j.match(i.match[d])&&a.f.hazSite[h][g](f)}

}

a.f.hazTag[g]&&
a.f.hazTag[g](f)}

}

,getHeight:function(){return Math.max(Math.max(a.d.b.scrollHeight,a.d.d.scrollHeight),Math.max(a.d.b.offsetHeight,a.d.d.offsetHeight),Math.max(a.d.b.clientHeight,a.d.d.clientHeight))}

,structure:function(){a.s.shim=a.f.make({IFRAME:{height:"100%",width:"100%",allowTransparency:true,id:a.a.k+"_shim"}

}

);

a.s.shim.setAttribute("nopin","nopin");

a.d.b.appendChild(a.s.shim);

a.s.bg=a.f.make({DIV:{id:a.a.k+"_bg"}

}

);

a.d.b.appendChild(a.s.bg);

a.s.bd=a.f.make({DIV:{id:a.a.k+"_bd"}

}

);

a.s.x=a.f.make({A:{id:a.a.k+
"_x",innerHTML:a.a.msg.cancelTitle}

}

);

a.s.bd.appendChild(a.s.x);

a.s.bd.appendChild(a.f.make({SPAN:{id:a.a.k+"_logo"}

}

));

a.s.embedContainer=a.f.make({I:{id:a.a.k+"_embedContainer"}

}

);

a.s.bd.appendChild(a.s.embedContainer);

a.s.imgContainer=a.f.make({I:{id:a.a.k+"_imgContainer"}

}

);

a.s.bd.appendChild(a.s.imgContainer);

a.d.b.appendChild(a.s.bd);

var b=a.f.getHeight();

if(a.s.bd.offsetHeight<b){a.s.bd.style.height=b+"px";

a.s.bg.style.height=b+"px";

a.s.shim.style.height=b+"px"}

a.w.scroll(0,0)}

,checkUrl:function(){var b;


for(b in a.a.url)if(a.a.url[b].hasOwnProperty)if(a.d.URL.match(a.a.url[b])){a.f.hazUrl[b]();

if(a.v.hazGoodUrl===false)return false}

return true}

,checkPage:function(){if(a.f.checkUrl()){a.v.canonicalImage||a.f.checkTags();

if(a.v.hazGoodUrl===false)return false}

else return false;

return true}

,init:function(){a.d.d=a.d.documentElement;

a.d.b=a.d.getElementsByTagName("BODY")[0];

a.d.h=a.d.getElementsByTagName("HEAD")[0];

if(!a.d.b||!a.d.h)a.f.close(a.a.msg.noPinIncompletePage);

else if(k.hazPinningNow!==true){k.hazPinningNow=
true;

var b,c=a.n.userAgent;

a.v={saveScrollTop:a.w.pageYOffset,hazGoodUrl:true,hazAtLeastOneGoodThumb:0,awaitingCallbacks:0,thumbed:[],hazIE:function(){return/msie/i.test(c)&&!/opera/i.test(c)}

(),hazIOS:function(){return c.match(/iP/)!==null}

(),firstScript:a.d.getElementsByTagName("SCRIPT")[0],selectedText:a.f.getSelection(),hazCalledForInfo:{}

}

;

b=a.a.checkDomain.url+"?domains="+encodeURIComponent(a.w.location.host);

a.f.call(b,a.f.ping.checkDomain);

a.f.presentation();

a.f.structure();

if(a.f.checkPage())if(a.v.hazGoodUrl===
true){a.f.behavior();

if(a.f.callback.length>1)a.v.waitForCallbacks=a.w.setInterval(function(){if(a.v.awaitingCallbacks===0)if(a.v.hazAtLeastOneGoodThumb===0||a.v.tag.length===0){a.w.clearInterval(a.v.waitForCallbacks);

a.f.close(a.a.msg.notFound)}

}

,500);

else if(!a.v.canonicalImage&&(a.v.hazAtLeastOneGoodThumb===0||a.v.tag.length===0))a.f.close(a.a.msg.notFound)}

}

}

}

}

()}

;

a.f.init()}

)(window,document,navigator,{k:"PIN_"+(new Date).getTime(),checkDomain:{url:"//api.pinterest.com/v2/domains/filter_nopin/"}

,
cdn:{
"https:":"https://a248.e.akamai.net/passets.pinterest.com.s3.amazonaws.com",
"http:":"http://passets-cdn.pinterest.com"}

,embed:"//pinterest.com/embed/?",
pin:"'.$url.'",
minImgSize:80,thumbCellSize:200,check:["meta","iframe","embed","object","img","video","a"],url:{facebook:/^https?:\/\/.*?\.facebook\.com\//,flickr:/^https?:\/\/www\.flickr\.com\//,googleImages:/^https?:\/\/.*?\.google\.com\/search/,googleReader:/^https?:\/\/.*?\.google\.com\/reader\//,netflix:/^https?:\/\/.*?\.netflix\.com/,
pinterest:/^https?:\/\/.*?\.?pinterest\.com\//,stumbleUpon:/^https?:\/\/.*?\.stumbleupon\.com\//,tumblr:/^https?:\/\/www\.tumblr\.com/,vimeo:/^https?:\/\/vimeo\.com\//,youtube:/^https?:\/\/www\.youtube\.com\/watch\?/}

,stumbleFrame:["tb-stumble-frame","stumbleFrame"],tag:{img:{flickr:{att:"src",match:[/staticflickr.com/,/static.flickr.com/]}

,behance:{att:"src",match:[/^http:\/\/behance\.vo\.llnwd\.net/]}

,netflix:{att:"src",match:[/^http:\/\/cdn-?[0-9]\.nflximg\.com/,/^http?s:\/\/netflix\.hs\.llnwd\.net/]}

,
youtube:{att:"src",match:[/ytimg.com\/vi/,/img.youtube.com\/vi/]}

}

,video:{youtube:{att:"src",match:[/videoplayback/]}

}

,embed:{youtube:{att:"src",match:[/^http:\/\/s\.ytimg\.com\/yt/,/^http:\/\/.*?\.?youtube-nocookie\.com\/v/]}

}

,iframe:{youtube:{att:"src",match:[/^http:\/\/www\.youtube\.com\/embed\/([a-zA-Z0-9\-_]+)/]}

,vimeo:{att:"src",match:[/^http?s:\/\/vimeo.com\/(\d+)/,/^http:\/\/player\.vimeo\.com\/video\/(\d+)/]}

}

,object:{youtube:{att:"data",match:[/^http:\/\/.*?\.?youtube-nocookie\.com\/v/]}

}

}

,
msg:{
check:"",
cancelTitle:"'.$t0.'",
grayOut:"'.$t6.'",
noPinIncompletePage:"'.$t7.'",
bustFrame:"'.$t1.'",
noPin:"'.$t2.'",
noPinReason:"'.$t8.'",
privateDomain:"'.$t3.'",
notFound:"'.$t4.'",
installed:"'.$t5.'"
}

,pop:"status=yes,resizable=yes,scrollbars=yes,personalbar=no,directories=yes,location=yes,toolbar=yes,menubar=yes,left=0,top=0",
rules:["#_shim {z-index:8675309;

 position: absolute;

 background: transparent;

 top:0;

 right:0;

 bottom:0;

 left:0;

 width: 100%;

 }

","#_bg {z-index:8675310;

 position: absolute;

 top:0;

 right:0;

 bottom:0;

 left:0;

 background-color:#f2f2f2;

 opacity:.95;

 width: 100%;

 }

","#_bd {z-index:8675311;

 position: absolute;

 text-align: left;

 padding-top: 38px;

 width: 100%;

 top: 0;

 left: 0;

 right: 0;

 font:16px hevetica neue,arial,san-serif;

 }

","#_bd i { font-style:normal;

 }

","#_bd a#_x { z-index:8675332;

 position: fixed;

 *position:absolute;

 width:100%;

 top: 0;

 left: 0;

 right: 0;

 cursor: pointer;

 height: 37px;

 line-height: 36px;

 font-size: 14px;

 font-weight: bold;

 display: block;

 margin: 0;

 background: url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/fullGradient07Normal.png) repeat-x scroll 0 0 #FFFFFF;

 border-bottom: 1px solid #aaa;

 color: #211922;

 text-align: center;

}

",
"#_bd a#_x:active {background-color: #211922;

 background-image: url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/fullGradient07Inverted.png);

 border-color: #211922;

 text-shadow: 0 -1px #211922;

 }

","#_bd a#_x:hover {color: #fff;

 text-decoration: none;

 background-color: #900;

 border-color: #900;

 text-shadow: 0 -1px #900;

}

","#_bd span { z-index:8675312;

 height:200px;

 width:200px;

 overflow:hidden;

 zoom:1;

 display:inline-block;

 background: #fff;

 text-shadow: 0 1px #fff;

 position: relative;

 vertical-align:middle;

 border: 1px solid #aaa;

 border-top: none;

 border-left: none;

}

",
"#_bd span#_logo {background: #FCF9F9 url('.theme_get_setting('logo').') 50% 50% no-repeat;

}

","#_bd span a {z-index:8675314;

 cursor: pointer;

 height: 200px;

 width: 200px;

 }

","#_bd span a img { z-index: 8675316;

 position: absolute;

 top: 0;

 left: 0;

 border: 0;

 margin: 0;

 }

","#_bd span a b {z-index: 8675317;

  position: absolute;

 top: 50%;

 left: 50%;

 height: 50px;

 width: 50px;

 background: transparent url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/VideoIndicator.png) 0 0 no-repeat;

 margin-top: -25px;

 margin-left: -25px;

 }

","#_bd span a cite {z-index: 8675317;

  position: absolute;

 font-size: 10px;

 font-style: normal;

 bottom: 5px;

 width: 100px;

 left: 50%;

 margin-left: -50px;

 text-align: center;

 color: #000;

 background: #fff;

 padding: 3px;

}

",
"#_bd span._pinContainer span._pinButton {z-index: 8675318;

  line-height: 200px;

 font-size: 200px;

 cursor: pointer;

 position: absolute;

 top: 0;

 left: 0;

 height:200px;

 width:200px;

 background: transparent;

 }

","#_bd span._pinContainer span._pinButton:hover {background: transparent url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/PinThis.png) 50% 50% no-repeat;

 }

","#_bd span._pinContainer span._hideMe { z-index: 8675332;

position: absolute;

 height: 200px;

 width: 200px;

 background: rgba(128, 128, 128, .5);

 *background: #aaa;

 line-height: 200px;

 font-size: 10px;

 color: #fff;

 text-align: center;

 font-weight: normal!important;

 }

"]}

);

');
} else {
$url = str_replace(array('http:','https:'),'',url('node/add/pin', array('absolute' => TRUE)));
print str_replace(array("\n","\r"),'','
(function(k,o,p,l){
	var a=k[l.k]={w:k,d:o,n:p,a:l,s:{
  }, f:function(){
		return{
			callback:[],kill:function(b){
				b.parentNode&&b.parentNode.removeChild(b)
			}, get:function(b,c){
				var e=null;
				return e=b[c]||b.getAttribute(c)
			}, make:function(b){
				var c=false,e,d;
				for(e in b)if(b[e].hasOwnProperty){
					c=a.d.createElement(e);
					for(d in b[e]) if(b[e][d].hasOwnProperty) if(typeof b[e][d]==="string") c[d]=b[e][d];
					break
				}

				return c
			} ,listen:function(b,c,e){
				if(typeof a.w.addEventListener!=="undefined")b.addEventListener(c,e,false);
				else typeof a.w.attachEvent!=="undefined"&&b.attachEvent("on"+c,e)
			}, getSelection:function(){
				return(""+(a.w.getSelection?a.w.getSelection():a.d.getSelection?a.d.getSelection():a.d.selection.createRange().text)).replace(/(^\s+|\s+$)/g,"")
			}, pin:function(b){
				var c=b.getElementsByTagName("IMG")[0],e="false",d=a.a.pin+"?",f=(new Date).getTime();
				if(b.rel==="video")e="true";
				d=d+"media="+encodeURIComponent(c.src);
				d=d+"&url="+encodeURIComponent(c.getAttribute("url")||a.d.URL);
				d=d+"&title="+encodeURIComponent(a.d.title);
				d=d+"&is_video="+e;
				d=d+"&description="+encodeURIComponent(a.v.selectedText||c.title||c.alt);
				a.v.hazIOS&&a.w.setTimeout(function(){
					a.w.location="pinit12:"+d
				}, 25);
				a.w.open(d,"pin"+f,a.a.pop)
			}, close:function(b){
				if(a.s.bg){
					a.d.b.removeChild(a.s.shim);
					a.d.b.removeChild(a.s.bg);
					a.d.b.removeChild(a.s.bd)
				}

				k.hazPinningNow=false;
				b&&a.w.alert(b);
				a.v.hazGoodUrl=false;
				a.w.scroll(0,a.v.saveScrollTop)
			}, click:function(b){
				b=b||a.w.event;
				var c=null;
				if(c=b.target?b.target.nodeType===3?b.target.parentNode:b.target:b.srcElement)
					if(c===a.s.x)
					  a.f.close();
					else 
						if(c.parentNode.className===a.a.k+"_pinContainer"||c.className===a.a.k+"_pinButton"){
							a.f.pin(c.parentNode.getElementsByTagName("A")[0]);
							a.w.setTimeout(function(){
								a.f.close()
							},10)
						}
			}, behavior:function(){
				a.f.listen(a.s.bd,"click",a.f.click)
			}, presentation:function(){
				var b=a.f.make({
					STYLE:{
						type:"text/css"
					}
				}),c=a.a.rules.join("\n").replace(/#_/g,"#"+l.k+"_").replace(/\._/g,"."+l.k+"_");
				if(b.styleSheet)b.styleSheet.cssText=c;
				else b.appendChild(a.d.createTextNode(c));
				a.d.h.appendChild(b)
			}, thumb:function(b,c,e,d,f,g){
				if(a.v.hazSrc[b]!==true)a.v.hazSrc[b]=true;
				else if(!a.v.hazIE)return;
				a.v.hazAtLeastOneGoodThumb=true;
				d||(d="image");
				var h=a.f.make({
					SPAN:{
						className:a.a.k+"_pinContainer"
					}
				}), j=a.f.make({
					A:{
						rel:d
					}
				}), i=new Image,m,n;
				i.setAttribute("nopin","nopin");
				i.style.visibility="hidden";
				if(f)i.title=f;
				g&&i.setAttribute("url",g);
				i.onload=function(){
					m=this.width;
					n=this.height;
					this.style.marginTop=n<a.a.thumbCellSize?-n/2+"px":"-"+a.a.thumbCellSize/2+"px";
					this.style.marginLeft=m<a.a.thumbCellSize?-m/2+"px":"-"+a.a.thumbCellSize/2+"px";
					this.style.visibility=""
				};
				i.src=b;
				j.appendChild(i);
				if(d!=="image"){
					b=a.f.make({
						B:{
						}
					});
					j.appendChild(b)
				}

				c=a.f.make({
					CITE:{
						innerHTML:c+" x "+e
					}

				});
				j.appendChild(c);
				h.appendChild(j);
				h.appendChild(a.f.make({
					SPAN:{
						className:a.a.k+"_pinButton"
					}

				}));
				if(d!=="image")(d=a.s.bd.getElementsByTagName("SPAN")[1])?d.parentNode.insertBefore(h,d):a.s.bd.appendChild(h);
				else a.s.bd.appendChild(h)
			}, call:function(b,c){
				var e=a.a.k+".f.callback["+a.f.callback.length+"]",d=a.d.createElement("SCRIPT");
				a.f.callback.push(function(f){
					c(f);
					a.f.kill(e)
				});
				d.id=e;
				d.src=b+e;
				d.type="text/javascript";
				d.charset="utf-8";
				a.v.firstScript.parentNode.insertBefore(d,a.v.firstScript)
			}, ping:{
				check:function(b){
					b&&b.ok===false&&a.f.close(a.a.msg.noPin)
				}, vimeo:function(b){
					var c;
					if(b[0]&&b[0].thumbnail_large&&b[0].embed_privacy==="anywhere"){
						c="";
						if(b[0].title)c+=b[0].title;
						if(b[0].user_name)c=c+". Video by "+b[0].user_name;
						if(b[0].user_description)c=c+". "+b[0].user_description;
						c+=".";
						a.f.thumb(b[0].thumbnail_large,150,200,"video",c,b[0].url)
					}
				}
			}, hazUrl:{
				vimeo:function(){
				var b=a.d.URL.split("/").pop(),c=a.d.getElementsByTagName("LI"),e=a.d.getElementsByTagName("A"),d,f;
				b=parseInt(b,10);
				if(b>1&&a.v.hazCalledForThumb["_"+b]!==true){
					a.f.call("http://vimeo.com/api/v2/video/"+b+".json?callback=",a.f.ping.vimeo);
					a.v.hazCalledForThumb["_"+b]=true
				}

				d=c.length;
				for(f=0; f<d; f+=1) if(c[f].id&&c[f].id.split("clip_")[1]){
					b=c[f].id.split("clip_")[1];
					b=parseInt(b,10);
					if(b>1&&a.v.hazCalledForThumb["_"+b]!==true){
						a.v.hazCalledForThumb["_"+b]=true;
						a.f.call("http://vimeo.com/api/v2/video/"+b+".json?callback=",a.f.ping.vimeo)
					}	
				}

				d=e.length;
				for(f=0; f<d; f+=1)if(e&&e[f].href){
					b=parseInt(e[f].href.split("/").pop(),10);
					if(b>1&&a.v.hazCalledForThumb["_"+b]!==true){
						a.f.call("http://vimeo.com/api/v2/video/"+b+".json?callback=",a.f.ping.vimeo);
						a.v.hazCalledForThumb["_"+b]=true
					}
				}
			}, pinterest:function(){
				a.f.close(a.a.msg.installed)
			}, facebook:function(){
				a.f.close(a.a.msg.privateDomain.replace(/%privateDomain%/,"Facebook"))
			}, googleReader:function(){
				a.f.close(a.a.msg.privateDomain.replace(/%privateDomain%/,"Google Reader"))
			}, stumbleUpon:function(){
				var b=0,c=a.a.stumbleFrame.length,e;
				for(b=0; b<c; b+=1)if(e=a.d.getElementById(a.a.stumbleFrame[b])){
					a.f.close();
					if(a.w.confirm(a.a.msg.bustFrame)){
						a.d.location=e.src;
						a.w.open(e.src)
					}

					break
				}
			}
		}, hazSite:{
			youtube:{
				iframe:function(b){
					b=b.src.split("?")[0].split("&")[0].split("/");
					a.f.thumb("http://img.youtube.com/vi/"+b.pop()+"/0.jpg",360,480,"video")
				}, video:function(b){
					b.getAttribute("data-youtube-id")&&a.f.thumb("http://img.youtube.com/vi/"+b.getAttribute("data-youtube-id")+"/0.jpg",360,480,"video")
				}, embed:function(b){
					var c=b.getAttribute("flashvars"),e="";
					(e=c?c.split("video_id=")[1].split("&")[0]:b.src.split("?")[0].split("&")[0].split("/").pop())&&a.f.thumb("http://img.youtube.com/vi/"+e+"/0.jpg",360,480,"video")
				}, object:function(b){
					b=b.getAttribute("data");
					var c="";
					if(b)c=b.split("?")[0].split("&")[0].split("/").pop();
					c&&a.f.thumb("http://img.youtube.com/vi/"+c+"/0.jpg",360,480,"video")
				}
			}, vimeo:{
				iframe:function(b){
					a.f.call("http://vimeo.com/api/v2/video/"+b.src.split("/").pop()+".json?callback=",a.f.ping.vimeo)
				}

			}

		},hazTag:{
			img:function(b){
				var c;
				if(!b.src.match(/^data/)){
					c=new Image;
					c.src=b.src;
					c.height>a.a.minImgSize&&c.width>a.a.minImgSize&&a.f.thumb(c.src,c.height,c.width)
				}
			},meta:function(b){
				b.name&&b.name.toUpperCase()==="PINTEREST"&&b.content&&b.content.toUpperCase()==="NOPIN"&&a.f.close(a.a.msg.noPin)
			}
		},checkTags:function(){
			var b,c,e,d,f,g,h,j,i;
			a.v.tag=[];
			b=0;
			for(c=a.a.check.length; b<c; b+=1){
				f=a.d.getElementsByTagName(a.a.check[b]);
				e=0;
				for(d=f.length; e<d; e+=1){
					g=f[e];
					!g.getAttribute("nopin")&&g.style.display!=="none"&&g.style.visibility!=="hidden"&&a.v.tag.push(g)
				}
			}

			b=0;
			for(c=a.v.tag.length;b<c;b+=1){
				f=a.v.tag[b];
				g=f.tagName.toLowerCase();
				if(a.f.hazTag[g])
					a.f.hazTag[g](f);
				else 
					if(a.a.tag[g])for(h in a.a.tag[g])if(a.a.tag[g][h].hasOwnProperty){
				j=a.a.tag[g][h];
				if(i=a.f.get(f,j.att)){
					e=0;
					for(d=j.match.length; e<d;e+=1)i.match(j.match[e])&&a.f.hazSite[h][g](f)
				}
			}
		}
	},structure:function(){
		a.s.shim=a.f.make({
			IFRAME:{
				height:"100%",width:"100%",allowTransparency:true,id:a.a.k+"_shim"
			}
		});
		a.s.shim.setAttribute("nopin","nopin");
		a.d.b.appendChild(a.s.shim);
		a.s.bg=a.f.make({
			DIV:{
				id:a.a.k+"_bg"
			}
		});
		a.d.b.appendChild(a.s.bg);
		a.s.bd=a.f.make({
			DIV:{
				id:a.a.k+"_bd"
			}
		});
		a.s.x=a.f.make({
			A:{
				id:a.a.k+"_x",innerHTML:a.a.msg.cancelTitle
			}
		});
		a.s.bd.appendChild(a.s.x);
		a.s.bd.appendChild(a.f.make({
			SPAN:{
				id:a.a.k+"_logo"
			}
		}));
		a.d.b.appendChild(a.s.bd);
		a.w.scroll(0,0)
	},checkUrl:function(){
		var b;
		for(b in a.a.url)if(a.a.url[b].hasOwnProperty)if(a.d.URL.match(a.a.url[b])){
			a.f.hazUrl[b]();
			if(a.v.hazGoodUrl===false)return false
		}

		return true
	},checkPage:function(){
		if(a.f.checkUrl()){
			a.f.checkTags();
			if(a.v.hazGoodUrl===false)return false
		}
		else return false;
		return true
	},init:function(){
		a.d.b=a.d.getElementsByTagName("BODY")[0];
		a.d.h=a.d.getElementsByTagName("HEAD")[0];
		if(!(!a.d.b||!a.d.h||k.hazPinningNow===true)){
			var b,c=a.n.userAgent;
			a.v={
				saveScrollTop:a.w.pageYOffset,hazGoodUrl:true,hazAtLeastOneGoodThumb:false,hazSrc:{
			},hazCalledForThumb:{
		},hazIE:function(){
			return/msie/i.test(c)&&!/opera/i.test(c)
		}(),hazIOS:function(){
			return c.match(/iP/)!==null
		}(),firstScript:a.d.getElementsByTagName("SCRIPT")[0],selectedText:a.f.getSelection()
	};
	b=a.a.checkpoint.url+"?url="+encodeURIComponent(a.d.URL)+"&callback=";
	a.f.call(b,a.f.ping.check);
	a.f.structure();
	a.f.presentation();
	if(a.f.checkPage())if(a.v.hazGoodUrl===true){
		a.f.behavior();
		if(!(a.f.callback.length>1))if(a.v.hazAtLeastOneGoodThumb===false||a.v.tag.length===0){
			a.f.close(a.a.msg.notFound);
			return
		}
	}

	k.hazPinningNow=true
}
}
}
}()
};
a.f.init()
})(window,document,navigator,{
	k:"PIN_"+(new Date).getTime(),
	checkpoint:{
		url:"'.$url.'"
	},pin:"'.$url.'",minImgSize:80,thumbCellSize:200,check:["meta","iframe","embed","object","img","video"],
		url:{
			vimeo:/^https?:\/\/.*?\.?vimeo\.com\//,facebook:/^https?:\/\/.*?\.?facebook\.com\//,googleReader:/^https?:\/\/.*?\.?google\.com\/reader\//,pinterest:/^https?:\/\/.*?\.?pinterest\.com\//,stumbleUpon:/^https?:\/\/.*?\.?stumbleupon\.com\//
		},
		stumbleFrame:["tb-stumble-frame","stumbleFrame"],
		tag:{
		video:{
			youtube:{
				att:"src",
				match:[/videoplayback/]
			}
		},
		embed:{
			youtube:{
				att:"src",match:[/^http:\/\/s\.ytimg\.com\/yt/,/^http:\/\/.*?\.?youtube-nocookie\.com\/v/]
			}
		},
		iframe:{
			youtube:{
				att:"src",match:[/^http:\/\/www\.youtube\.com\/embed\/([a-zA-Z0-9\-_]+)/]
			},
			vimeo:{
				att:"src",match:[/^http?s:\/\/vimeo.com\/(\d+)/,/^http:\/\/player\.vimeo\.com\/video\/(\d+)/]
			}
		},
		object:{
			youtube:{
				att:"data",match:[/^http:\/\/.*?\.?youtube-nocookie\.com\/v/]
			}
		}
	},
	msg:{
		check:"",
		cancelTitle:"'.$t0.'",
		bustFrame:"'.$t1.'",
		noPin:"'.$t2.'",
		privateDomain:"'.$t3.'",
		notFound:"'.$t4.'",
		installed:"'.$t5.'"
	},
	pop:"status=yes,resizable=yes,scrollbars=yes,personalbar=no,directories=yes,location=yes,toolbar=yes,menubar=yes,left=0,top=0",
		rules:["#_bg {
		position:fixed;
		z-index:8675309;
 		top:0;
 		right:0;
 		bottom:0;
 		left:0;
 		background-color:#e2e2e2;
 		opacity:.95; 
	}","
	#_shim {
		position:fixed;
 		background: transparent;
 		z-index:8675308;
 		top:0;
 		right:0;
 		bottom:0;
 		left:0;
	}","
	#_bd {
		position: absolute;
 		text-align: left;
 		padding-top: 36px;
 		top: 0;
 		left: 0;
 		right: 0;
 		z-index:8675320;
 		font:16px hevetica neue,arial,san-serif;
	}","
	#_bd span {
 		zoom:1;
 		display: inline-block;
 		background: #fff;
 		height:200px;
 		width:200px;
 		border: 1px solid #bbb;
 		border-top: none;
 		border-left:none;
 		text-decoration: none;
  	text-shadow: 0 1px #fff;
 		position: relative;
 		cursor: pointer;
 		vertical-align:middle; 
	}","
	#_bd span#_logo {
		background: #FCF9F9 url('.theme_get_setting('logo').') 50% 50% no-repeat;
 		box-shadow: none;
	}","
	#_bd a#_x {
		height: 36px;
 		line-height: 36px;
 		position: fixed;
 		font-size: 14px;
 		font-weight: bold;
 		display: block;
 		width:auto;
 		top: 0;
 		left: 0;
 		right: 0;
 		margin: 0;
 		background: url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/fullGradient07Normal.png) repeat-x scroll 0 0 #FFFFFF;
 		border-bottom: 1px solid #bbb;
 		color: #211922;
 		text-align: center;
 		z-index:8675321;
	}","
	#_bd a#_x:active {
		background-color: #211922;
 		background-image: url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/fullGradient07Inverted.png);
 		border-color: #211922;
 		text-shadow: 0 -1px #211922;
	}","
	#_bd a#_x:hover {
		color: #fff;
 		text-decoration: none;
 		background-color: #900;

 		border-color: #900;
 		text-shadow: 1px 1px #600;
	}","
	#_bd a img {
		max-height:200px;
 		max-width:200px;
 		top: 50%;
 		left: 50%;
 		position: absolute;
 		z-index:8675312;
	}","
	#_bd a b {
 		z-index: 8675315;
 		position: absolute;
 		top: 50%;
 		left: 50%;
 		height: 50px;
 		width: 50px;
 		background: transparent url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/VideoIndicator.png) 0 0 no-repeat;
 		margin-top: -25px;
 		margin-left: -25px;
	}","
	#_bd a cite {
		z-index: 8675316;
 		position: absolute;
 		font-size: 10px;
 		font-style: normal;
 		bottom: 5px;
 		width: 100px;
 		left: 50%;
 		margin-left: -50px;
 		text-align: center;
 		color: #000;
 		background: #fff;
 		padding: 3px;
	}","
	#_bd span._pinContainer {
		z-index: 8675320;
 		height: 200px;
 		width: 200px;
 		background: #fff;
	}","
	#_bd span._pinButton {
		z-index: 8675320;
 		height: 200px;
 		width: 200px;
 		background: transparent;
	}","
	#_bd span._pinButton:hover {
		height: 200px;
 		width: 200px;
 		background: transparent url('.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/PinThis.png) 50% 50% no-repeat;
	}"]

});
');
}
exit;
}


function pinboard_helper_addboardpin () {
  global $base_url;
  $out = '';
  $out .= '<div class="PinButtonB">'.l('<img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/pinitbutton.png" /><br />'.t('"Pin It" Button'), 'addpinit', array('html' => TRUE));
  $out .= l('<img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/createpin.png" /><br />'.t('Upload a Pin'), 'node/add/pin', array('html' => TRUE));
  $out .= l('<img src="'.$base_url.'/'.drupal_get_path('theme','pinboard').'/img/board.png" /><br />'.t('Create a Board'), 'board/add', array('html' => TRUE)).'</div>';
  return t($out);
}

function pinboard_helper_addpinit () {
  if (isset($GLOBALS['conf']['clean_url'])) $t = '?'; else $t = '&';
  $url = url('pinit', array('absolute' => TRUE)).$t;
  $out = '';
  $out .= '<div id="PinItButtonContainer"><div id="PinButton"><div id="ButtonHolder"><a onclick="alert(\''.t('Drag me to the bookmarks bar').'\'); return false;" href="javascript:void((function(){var e=document.createElement(\'script\');e.setAttribute(\'type\',\'text/javascript\');e.setAttribute(\'charset\',\'UTF-8\');e.setAttribute(\'src\',\''.$url.'r=\'+Math.random()*99999999);document.body.appendChild(e)})());" title="Pin It" id="BigPinItButton"><strong>'.t('Pin It').'</strong><span></span></a>';
  $out .= '<p id="ButtonInstructions"> &nbsp;&nbsp;'.t('Add this link to your Bookmarks Bar').'</p></div>';
  $out .= '<p>'.t('To install the "Pin It" button in your Browser:').'</p>';
  $out .= '<div id="InstallationInstructions" class="small"><ol>';
  $out .= '<li>'.t('Display your Bookmarks Bar by clicking View &gt; Toolbars &gt; Bookmarks Toolbar').'</li>';
  $out .= '<li>'.t('Drag the "Pin It" button to your Bookmarks Toolbar').'</li>';
  $out .= '<li>'.t('When you are browsing the web, push the "Pin It" button to pin an image').'</li>';
  $out .= '</ol></div>';
  $out .= '<p>'.t('Once installed in your browser, the "Pin It" button lets you grab an image from any website and add it to one of your pinboards. When you pin from a website, we automatically grab the source link so we can credit the original creator.').'</p>';
  $out .= '</div></div>';
  return $out;
}


function pinboard_helper_userpage_pins () {
	global $base_url, $user; 
	if (arg(1)) {
  	$acc = user_load(arg(1));
	} else {
		return '';
	}
	$destination = drupal_get_destination();
	$out = '';

	if (arg(2) == 'board') {
  	if (is_numeric(arg(3)) and arg(3)){
  	    $result = db_select('pinboard_boards')->fields('pinboard_boards', array('data'))->condition('bid', arg(3), '=')->execute();
  			foreach ($result as $us) {
    			$bdata = unserialize($us->data);
  			}
  			if (!isset($bdata['description'])) $bdata['description'] = '';
      $result = db_select('pinboard_boards', 'b')
      	->fields('b',array('name'))
        ->condition('bid', arg(3))
        ->condition('uid', arg(1))
        ->execute()->fetchCol(); 
      $out.='<div class="node_pin_page">';
      if ($user->uid and $acc->uid != $user->uid) 
        if (pinboard_helper_isfollow ($acc, arg(3))) 
          $out .= '<div class="flr"><a href="'.url('unfollow/'.$acc->uid.'/'.arg(3), array('query' => $destination)).'">'.'取消关注'.'</a></div>';
        else
          $out .= '<div class="flr"><a href="'.url('follow/'.$acc->uid.'/'.arg(3), array('query' => $destination)).'">'.'关注'.'</a></div>';
        if (isset($result[0])) $out .= '<h1 class="title">'.$result[0].'</h1>';
        if (!isset($_GET['page']) and $bdata['description']) $out .= '<p>'.$bdata['description'].'</p>';
        //if ($out) $out = '<div class="titlebg">'.$out.'</div>';
        $out.='</div>';//node_pin_page

        $out .= '<div class="pin_page masonry">';
        $result = db_select('pinboard_repins', 'r')->extend('PagerDefault')->fields('r', array('nid'))->condition('bid', arg(3), '=')->orderBy('nid', 'DESC')->limit(15)->execute()->fetchCol();
    } else {
      $out .= ''.'';
      $out .= '<div class="pin_page masonry">';
      $result = db_select('node', 'r')->extend('PagerDefault')->fields('r', array('nid'))->condition('type', 'pin', '=')->condition('status', 1, '=')->condition('uid', $acc->uid, '=')->orderBy('created', 'DESC')->limit(15)->execute()->fetchCol();
    }
    
    $nodes = node_load_multiple($result);
    $nodes = node_view_multiple($nodes);
    
    $pp = theme('pager');
    if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
    	$out .= render($nodes);
    $out .= $pp;
    $out .='</div>';//pin_page
  } elseif (arg(2) == 'followers') {
    $out1 = '<div class="node_pin_page">';
    $out1 .= '<h1 class="title">'.t('关注你的人').'</h1>';
    $out1 .='</div>';
    $out1 .= '<div class="pin_page masonry">';
    $uids = db_select('pinboard_follow','p')
      ->extend('PagerDefault')
      ->limit(15)
      //->fields('p', array('uid'));
    	->condition('p.aid', $acc->uid);
    $uids->addExpression('distinct(p.uid)');
    $uids = $uids->execute()->fetchCol();

    if (count($uids)) foreach ($uids as $uidi) {
      $ui = user_load($uidi);
      $result = db_select('node', 'r')
        ->fields('r', array('nid'))
        ->condition('uid', $uidi, '=')
        ->condition('type', 'pin', '=')
        ->range(0, 12)->execute()->fetchCol();
      $nodes = node_load_multiple($result);
      $nodes = node_view_multiple($nodes);
      $out1 .= '<div class="blk2"><h3>'.theme('username', array('account' => $ui)).'</h3><a href="'.url('user/'.$ui->uid).'"><ul class="b_thumbs">';
      foreach ($nodes['nodes'] as $k2 => $v2) {
        if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
        if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
        if (isset($v2['field_image']) and is_array($v2['field_image'])) $out1 .= '<li>'.render($v2['field_image']).'</li>';
      }
      $out1 .= '</ul></a></div>';
    }
    
    $pp = theme('pager');
    if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
      $out .= $out1;
    $out .= $pp;
    $out .='</div>';
  } elseif (arg(2) == 'following') {
    $out1 = '<div class="node_pin_page">';
    $out1 .= '<h1 class="title">'.t('你关注的人').'</h1>';
    $out1 .='</div>';
    $out1 .= '<div class="pin_page masonry">';
    $uids = db_select('pinboard_follow','p')
      //->fields('p', array('uid'));
      ->condition('p.uid', $acc->uid);
    $uids->addExpression('distinct(p.aid)');
    $uids = $uids->execute()->fetchCol();

    if (count($uids)) foreach ($uids as $uidi) {
      $ui = user_load($uidi);
      $result = db_select('node', 'r')
        ->fields('r', array('nid'))
        ->condition('uid', $uidi, '=')
        ->condition('type', 'pin', '=')
        ->range(0, 12)->execute()->fetchCol();
      $nodes = node_load_multiple($result);
      $nodes = node_view_multiple($nodes);
      $out1 .= '<div class="blk2"><h3>'.theme('username', array('account' => $ui)).'</h3><a href="'.url('user/'.$ui->uid).'"><ul class="b_thumbs">';
      foreach ($nodes['nodes'] as $k2 => $v2) {
        if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
        if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
        if (isset($v2['field_image']) and is_array($v2['field_image'])) $out1 .= '<li>'.render($v2['field_image']).'</li>';
      }
      $out1 .= '</ul></a></div>';
    }
    $pp = theme('pager');
    if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
    	$out .= $out1;
    $out .= $pp;
    $out .='</div>';
    } else {
      $out1 = '<div class="board_page">';
      //$out1 = '<div id="block-system-main" class="block block-system"><div class="content">';
      $result = db_select('pinboard_boards', 'b')
        ->extend('PagerDefault')
        ->fields('b',array('bid', 'name'))
        ->condition('uid', arg(1))
        ->orderBy('bid', 'DESC')
        ->limit(15)->execute()->fetchAllKeyed();   
      foreach ($result as $k => $v) {
        
        $result2 = db_select('pinboard_repins', 'r')->fields('r', array('nid'))->condition('bid', $k, '=')->orderBy('nid', 'DESC')->range(0, 9)->execute()->fetchCol();
        if (count($result2)) {
          $out1 .= '<div class="board_box"><a class="boards" href="'.url('user/'.$acc->uid.'/board/'.$k).'"><div class="title">'.$v.'</div>';
          $nodes = node_load_multiple($result2);
          $nodes = node_view_multiple($nodes);
          //print '<div class="user_profile_main"><pre>'. check_plain(print_r($nodes['nodes'], 1)) .'</pre></div>'; 
          foreach ($nodes['nodes'] as $k2 => $v2) {
            //print '<div class="user_profile_main"><pre>'. check_plain(print_r($v2['field_embed'], 1)) .'</pre></div>';  
            if (isset($v2['field_image']) and is_array($v2['field_image'])) { 
            	if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
              if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
              $out1 .= render($v2['field_image']);
            } elseif (isset($v2['field_embed']) and is_array($v2['field_embed'])) {
              if (isset($v2['field_embed'][0][0]['#style_name'])) $v2['field_embed'][0][0]['#style_name'] = 'pin_tmb_2';
              if (isset($v2['field_embed'][0]['#prefix'])) $v2['field_embed'][0]['#prefix'] = '';
              if (isset($v2['field_embed'][0]['#suffix'])) $v2['field_embed'][0]['#suffix'] = '';
              $out1 .= render($v2['field_embed']);
            }
          }
          $ii = 9 - count($result2);
        } else {
          $out1 .= '<div class="board_box"><a class="boards" href="#"><div class="title">'.$v.'</div>';
          $ii = 9;
        }
        for ( $i=0; $i<$ii; $i++) {
          $out1 .= '<img src="'.url('sites/all/themes/pinboard/img/tr.png').'"/>';
        }
        if (count($result2)) {
          $out1 .= '</a>';
        } else {
          $out1 .= '</a>';
        }
        
        if ($user->uid and $acc->uid != $user->uid) { 
          if (pinboard_helper_isfollow ($acc, $k)) 
            $out1 .= '<div class="board-links"><a href="'.url('unfollow/'.$acc->uid.'/'.$k, array('query' => $destination)).'">'.'取消关注'.'</a></div>';
          else
            $out1 .= '<div class="board-links"><a href="'.url('follow/'.$acc->uid.'/'.$k, array('query' => $destination)).'">'.'关注'.'</a></div>';
        } elseif ($user->uid) {
          $out1 .= '<div class="board-links"><a href="'.url('board/edit/'.$k, array('query' => $destination)).'">'.'编辑'.'</a></div>';
        }
        $out1 .= '</div>';
        //} else {
          //db_delete('pinboard_boards')->condition('bid', $k, '=')->execute();
        //}
        //print '</a></div><div class="follow_b"><a class="b" href="#">Follow</a></div></div></div>';
      }
      $out1 .= '</div>';
      $pp = theme('pager');
      if (!$pp or !isset($_GET['page']) or strpos($pp,'page='.$_GET['page']) or strpos($pp, '>'.($_GET['page'] + 1).'<'))
        $out .= $out1;
      $out .= $pp;
      //print theme('pager');
    }
    return $out;
}

function pinboard_helper_originally_pinned($node) {
  //drupal_set_message('<pre>'. check_plain(print_r($node, 1)) .'</pre>');

  $out = $out1 = '';
  $query = db_select('pinboard_repins', 'v');
  $query->addField('v', 'nid');
  $query->condition('v.uid', $node->ph_uid, '=');
  $query->orderRandom();
  $query->range(0, 6);
  $result = $query->execute()->fetchCol();
  $nodes = node_load_multiple($result);
  $nodes = node_view_multiple($nodes);

  foreach ($nodes['nodes'] as $k2 => $v2) {
    $out1 = '';
    if (isset($v2['field_image']) and is_array($v2['field_image'])) { 
      if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
      if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
      $out1 = render($v2['field_image']);
    } elseif (isset($v2['field_embed']) and is_array($v2['field_embed'])) {
      if (isset($v2['field_embed'][0][0]['#style_name'])) $v2['field_embed'][0][0]['#style_name'] = 'pin_tmb_2';
      if (isset($v2['field_embed'][0]['#prefix'])) $v2['field_embed'][0]['#prefix'] = '';
      if (isset($v2['field_embed'][0]['#suffix'])) $v2['field_embed'][0]['#suffix'] = '';
      $out1 = render($v2['field_embed']);
    }
    $out .= $out1 ? '<div>'.$out1.'</div>' : ''; 
  }
  return $out;
}

function pinboard_helper_pinned_onto_board($node) {
  

  $out = $out1 = '';
  $query = db_select('pinboard_repins', 'v');
  $query->addField('v', 'nid');
  $query->condition('v.bid', $node->ph_bid, '=');
  $query->orderRandom();
  $query->range(0, 5);
  $result = $query->execute()->fetchCol();
  $nodes = node_load_multiple($result);
  $nodes = node_view_multiple($nodes);
//drupal_set_message('<pre>'. check_plain(print_r($nodes, 1)) .'</pre>');
  foreach ($nodes['nodes'] as $k2 => $v2) {
    $out1 = '';
    if (isset($v2['field_image']) and is_array($v2['field_image'])) { 
      if (isset($v2['field_image'][0]['#image_style'])) $v2['field_image'][0]['#image_style'] = 'pin_tmb_2';
      if (isset($v2['field_image'][0]['#path'])) $v2['field_image'][0]['#path'] = '';
      $out1 = render($v2['field_image']);
    } elseif (isset($v2['field_embed']) and is_array($v2['field_embed'])) {
      if (isset($v2['field_embed'][0][0]['#style_name'])) $v2['field_embed'][0][0]['#style_name'] = 'pin_tmb_2';
      if (isset($v2['field_embed'][0]['#prefix'])) $v2['field_embed'][0]['#prefix'] = '';
      if (isset($v2['field_embed'][0]['#suffix'])) $v2['field_embed'][0]['#suffix'] = '';
      $out1 = render($v2['field_embed']);
    }
    $out .= $out1 ? '<div>'.$out1.'</div>' : ''; 
  }
  return $out;
}

function pinboard_helper_repins_count($node) {
  $out = 0;
  $query = db_select('pinboard_repins', 'v');
  $query->addExpression('COUNT(v.nid)');
  $query->condition('v.did', $node->nid, '=');
  $query->condition('v.nid', $node->nid, '!=');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_repins_users_count($node) {
  $out = 0;
  $query = db_select('pinboard_repins', 'v');
  $query->addExpression('COUNT(v.uid)');
  $query->condition('v.did', $node->nid, '=');
  $query->condition('v.nid', $node->nid, '!=');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_repins_users_out($node) {
  $out = '';
  $query = db_select('pinboard_repins', 'v');
  $query->addField('v', 'uid');
  $query->condition('v.did', $node->nid, '=');
  $query->condition('v.nid', $node->nid, '!=');
  $query->range(0, 12);
  $result = $query->execute()->fetchCol();
  foreach ($result as $ruid) {
    $ruser->uid = $ruid;
    $ruser = user_load($ruid);
    $out .= '<li>'.theme('user_picture', array('account' => $ruser))./*'<p>'.theme('username', array('account' => $ruser)).'</p>'.*/'</li>';
    unset($ruser);
  }
  return $out;
}

function pinboard_helper_like_box_count($node) {
  $out = 0;
  $query = db_select('votingapi_vote', 'v');
  $query->addExpression('COUNT(v.uid)');
  $query->condition('v.entity_type', 'node', '=');
  $query->condition('v.entity_id', $node->nid, '=');
  $query->condition('v.uid', 0, '>');
  $count = $query->execute()->fetchCol();
  if ($count[0]) { $out = $count[0]; }
  return $out;
}

function pinboard_helper_like_box_out($node) {
  $out = '';
  $query = db_select('votingapi_vote', 'v');
  $query->addField('v', 'uid');
  $query->condition('v.entity_type', 'node', '=');
  $query->condition('v.entity_id', $node->nid, '=');
  $query->condition('v.uid', 0, '>');
  $query->range(0, 12);
  $result = $query->execute()->fetchCol();
  foreach ($result as $ruid) {
    $ruser->uid = $ruid;
    $ruser = user_load($ruid);
    $out .= '<li>'.theme('user_picture', array('account' => $ruser)).'</li>';
    unset($ruser);
  }
  return $out;
}

function pinboard_helper_top_users(){
  $out='';
  /*$query = db_select('node', 'n');
  $query->addField('n', 'count(nid)','ncount');
  $query->addField('u');
  $query->condition('n.type', 'pin', '=');
  $query->groupBy('n.uid');
  $query->range(0, 5);
  $result = $query->execute()->fetchCol();*/
  $result= db_query("SELECT count(nid) ncount,uid FROM {node} n where type='pin' group by uid LIMIT 0,5");
  foreach ($result as $top_user) {
    $_user=user_load($top_user->uid);
    $out.='<div class="user">'.theme('user_picture', array('account' => $_user)).theme('username', array('account' => $_user)).'</div>';
  }
  return $out;
}

function pinboard_helper_top_borads(){
  $out='<div class="boards_top">';
  $result= db_query("SELECT count(f.uid) ucount,f.uid,pid,b.name FROM {pinboard_follow} f left join {pinboard_boards} b on f.pid=b.bid group by pid order by ucount desc LIMIT 0,3");
  foreach ($result as $top_board) {    
      $result2 = db_select('pinboard_repins', 'r')->fields('r', array('nid'))->condition('bid', $top_board->pid, '=')->orderBy('nid', 'DESC')->range(0, 9)->execute()->fetchCol();
      if (count($result2)) {
        $out .= '<div class="board_box"><a class="boards" href="'.url('user/'.$top_board->uid.'/board/'.$top_board->pid).'"><div class="title">'.$top_board->name.'</div>';
        $nodes = node_load_multiple($result2);
        $nodes = node_view_multiple($nodes);
        //print '<div class="user_profile_main"><pre>'. check_plain(print_r($nodes['nodes'], 1)) .'</pre></div>'; 
        foreach ($nodes['nodes'] as $k => $v) {
          //print '<div class="user_profile_main"><pre>'. check_plain(print_r($v2['field_embed'], 1)) .'</pre></div>';  
          if (isset($v['field_image']) and is_array($v['field_image'])) { 
            if (isset($v['field_image'][0]['#image_style'])) $v['field_image'][0]['#image_style'] = 'pin_tmb_2';
            if (isset($v['field_image'][0]['#path'])) $v['field_image'][0]['#path'] = '';
            $out .= render($v['field_image']);
          } elseif (isset($v['field_embed']) and is_array($v['field_embed'])) {
            if (isset($v['field_embed'][0][0]['#style_name'])) $v['field_embed'][0][0]['#style_name'] = 'pin_tmb_2';
            if (isset($v['field_embed'][0]['#prefix'])) $v['field_embed'][0]['#prefix'] = '';
            if (isset($v['field_embed'][0]['#suffix'])) $v['field_embed'][0]['#suffix'] = '';
            $out .= render($v['field_embed']);
          }
        }
        $ii = 9 - count($result2);
      } else {
        $out .= '<div class="board_box"><a class="boards" href="#"><div class="title">'.$top_board->name.'</div>';
        $ii = 9;
      }
      for ( $i=0; $i<$ii; $i++) {
        $out .= '<img src="'.url('sites/all/themes/pinboard/img/tr.png').'"/>';
      }
      if (count($result2)) {
        $out .= '</a>';
      } else {
        $out .= '</a>';
      }
      
      $out .= '</div>';
    }
  $out .= '</div>';
  return $out;
}
